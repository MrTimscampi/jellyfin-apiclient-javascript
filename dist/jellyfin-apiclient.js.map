{"version":3,"sources":["webpack://[name]/webpack/bootstrap","webpack://[name]/./src/events.js","webpack://[name]/./src/appStorage.js","webpack://[name]/./src/utils/fetch.js","webpack://[name]/./src/utils/bitrate.js","webpack://[name]/./src/utils/websocket.js","webpack://[name]/./src/utils/strings.js","webpack://[name]/./src/utils/instance.js","webpack://[name]/./src/apiClient.js","webpack://[name]/./src/apiClientCore.js","webpack://[name]/./src/connectionManager.js","webpack://[name]/./src/index.js","webpack://[name]/./src/credentials.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","getCallbacks","obj","Error","_callbacks","list","on","eventName","fn","push","off","indexOf","splice","trigger","eventObject","type","eventArgs","additionalArgs","arguments","length","slice","forEach","apply","onCachePutFail","e","console","log","updateCache","instance","cache","put","Response","JSON","stringify","localData","catch","onCacheOpened","result","this","MyStore","constructor","self","caches","open","then","err","setItem","localStorage","getItem","removeItem","paramsToString","params","values","encodeURIComponent","join","getFetchPromise","request","headers","dataType","accept","fetchRequest","method","credentials","contentType","data","body","timeout","fetchWithTimeout","url","fetch","onFetchFail","response","events","status","errorCode","includeAuthorization","setRequestHeaders","enableAutomaticNetworking","lastFetch","Date","getTime","json","toLowerCase","text","Promise","reject","error","fetchWithFailover","options","timeoutMs","resolve","setTimeout","clearTimeout","tryReconnectInternal","addresses","addressesStrings","serverInfo","LocalAddress","ManualAddress","RemoteAddress","state","numAddresses","rejects","map","resolved","getUrl","serverAddress","getTryConnectPromise","stopBitrateDetection","detectTimeout","redetectBitrateInternal","accessToken","detectBitrate","redetectBitrate","enableAutomaticBitrateDetection","normalizeReturnBitrate","bitrate","lastDetectedBitrate","Math","round","getMaxBandwidth","maxRate","min","lastDetectedBitrateTime","detectBitrateWithEndpointInfo","endpointInfo","IsInNetwork","detectBitrateInternal","tests","index","currentBitrate","test","getDownloadSpeed","bytes","threshold","messageIdsReceived","onMessageReceivedInternal","msg","messageId","MessageId","MessageType","_currentUser","Data","Id","getCurrentUserId","onWebSocketMessage","parse","onWebSocketOpen","onWebSocketError","replaceAll","originalString","strReplace","strWith","reg","RegExp","replace","setSavedEndpointInfo","info","_endPointInfo","getCachedUser","userId","serverId","appStorage","getRemoteImagePrefix","urlPrefix","artist","encodeName","person","genre","musicGenre","studio","itemId","normalizeImageOptions","ratio","_devicePixelRatio","minScale","max","width","height","maxWidth","maxHeight","quality","getDefaultImageQuality","ApiClient","appName","appVersion","deviceName","deviceId","debug","_serverInfo","_serverAddress","_deviceId","_deviceName","_appName","_appVersion","devicePixelRatio","currentServerInfo","AccessToken","auth","val","changed","onNetworkChange","charAt","enableReconnection","toString","previousServerAddress","tryReconnect","retryCount","innerError","setAuthenticationInfo","accessKey","UserId","serverName","Name","ajax","getCurrentUser","enableCache","user","serverPromise","getUser","ServerId","isLoggedIn","logout","closeWebSocket","done","authenticateUserByName","password","postData","Username","Pw","afterOnAuthenticated","onAuthenticated","ensureWebSocket","isWebSocketOpenOrConnecting","isWebSocketSupported","openWebSocket","webSocket","WebSocket","apiClient","socket","onmessage","onopen","onerror","onclose","_webSocket","readyState","OPEN","close","sendWebSocketMessage","send","sendMessage","isWebSocketOpen","isMessageChannelOpen","CONNECTING","getJSON","updateServerInfo","server","serverUrl","clearAuthenticationInfo","split","substring","byteSize","Size","now","responseTimeSeconds","bytesPerSecond","force","getEndpointInfo","getRootFolder","getNotificationSummary","getNotifications","markNotificationsRead","idList","isRead","suffix","Ids","getRemoteImageProviders","getAvailableRemoteImages","downloadRemoteImage","getRecordingFolders","getLiveTvInfo","getLiveTvGuideInfo","getLiveTvChannel","id","getLiveTvChannels","getLiveTvPrograms","channelIds","getLiveTvRecommendedPrograms","getLiveTvRecordings","getLiveTvRecordingSeries","getLiveTvRecordingGroups","getLiveTvRecordingGroup","getLiveTvRecording","getLiveTvProgram","deleteLiveTvRecording","cancelLiveTvTimer","getLiveTvTimers","getLiveTvTimer","getNewLiveTvTimerDefaults","createLiveTvTimer","item","updateLiveTvTimer","resetLiveTvTuner","getLiveTvSeriesTimers","getLiveTvSeriesTimer","cancelLiveTvSeriesTimer","createLiveTvSeriesTimer","updateLiveTvSeriesTimer","getRegistrationInfo","feature","getSystemInfo","setSystemInfo","getSyncStatus","TargetId","getPublicSystemInfo","getInstantMixFromItem","getEpisodes","getDisplayPreferences","app","client","updateDisplayPreferences","getSeasons","getSimilarItems","getCultures","getCountries","getPlaybackInfo","deviceProfile","DeviceProfile","getLiveStreamMediaInfo","liveStreamId","LiveStreamId","getIntros","getDirectoryContents","path","getNetworkShares","getParentPath","getDrives","getNetworkDevices","cancelPackageInstallation","installationId","refreshItem","installPlugin","guid","updateClass","version","AssemblyGuid","restartServer","shutdownServer","getPackageInfo","getVirtualFolders","getPhysicalPaths","getServerConfiguration","getDevicesOptions","getContentUploadHistory","DeviceId","getNamedConfiguration","getScheduledTasks","startScheduledTask","getScheduledTask","getNextUpEpisodes","stopScheduledTask","getPluginConfiguration","getAvailablePlugins","PackageType","uninstallPlugin","removeVirtualFolder","refreshLibrary","addVirtualFolder","libraryOptions","collectionType","LibraryOptions","updateVirtualFolderOptions","renameVirtualFolder","newName","addMediaPath","virtualFolderName","mediaPath","networkSharePath","pathInfo","Path","NetworkPath","PathInfo","updateMediaPath","removeMediaPath","deleteUser","deleteUserImage","imageType","imageIndex","deleteItemImage","deleteItem","stopActiveEncodings","playSessionId","PlaySessionId","reportCapabilities","updateItemImageIndex","newIndex","getItemImageInfos","getCriticReviews","getItemDownloadUrl","api_key","getSessions","uploadUserImage","file","startsWith","reader","FileReader","onabort","onload","target","lastIndexOf","readAsDataURL","uploadItemImage","getInstalledPlugins","getStudio","getGenre","getMusicGenre","getArtist","getPerson","getPublicUsers","getUsers","getParentalRatings","getUserImageUrl","getImageUrl","getScaledImageUrl","getThumbImageUrl","ImageTags","Thumb","tag","ParentThumbItemId","ParentThumbImageTag","updateUserPassword","currentPassword","newPassword","CurrentPw","NewPw","updateEasyPassword","resetUserPassword","resetEasyPassword","updateServerConfiguration","configuration","updateNamedConfiguration","updateItem","updatePluginSecurityInfo","createUser","updateUser","updateUserPolicy","policy","updateUserConfiguration","updateScheduledTaskTriggers","triggers","updatePluginConfiguration","getAncestorItems","getItems","getResumableItems","isMinServerVersion","assign","SortBy","SortOrder","Filters","Recursive","CollapseBoxSetItems","ExcludeLocationTypes","getMovieRecommendations","getUpcomingEpisodes","getUserViews","getArtists","getAlbumArtists","getGenres","getMusicGenres","getPeople","getStudios","getLocalTrailers","getAdditionalVideoParts","getThemeMedia","inherit","InheritFromParent","getSearchHints","SearchHints","getSpecialFeatures","getDateParamValue","date","formatDigit","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","markPlayed","DatePlayed","markUnplayed","updateFavoriteStatus","isFavorite","updateUserItemRating","likes","getItemCounts","clearUserItemRating","reportPlaybackStart","lastPlaybackProgressReport","lastPlaybackProgressReportTicks","reportPlaybackProgress","newPositionTicks","PositionTicks","EventName","msSinceLastReport","expectedReportTicks","abs","reportOfflineActions","actions","syncData","getReadySyncItems","reportSyncJobItemTransferred","syncJobItemId","cancelSyncItems","itemIds","targetId","ItemIds","reportPlaybackStopped","sendPlayCommand","sessionId","sendCommand","command","ajaxOptions","sendMessageCommand","sendPlayStateCommand","createPackageReview","review","getPackageReviews","packageId","minRating","maxRating","limit","MinRating","MaxRating","Limit","getSavedEndpointInfo","savedValue","endPointInfo","getLatestItems","getFilters","_serverVersion","Version","serverVersion","a","b","aVal","parseInt","bVal","compareVersions","handleMessageReceived","isLocalId","str","isLocalViewId","isTopLevelLocalViewId","stripLocalPrefix","res","stripStart","find","substr","convertGuidToLocal","adjustGuidProperties","downloadedItem","SeriesId","SeasonId","AlbumId","ParentId","ParentPrimaryImageItemId","PrimaryImageItemId","ParentLogoItemId","ParentBackdropItemId","ParentBackdropImageTags","getLocalView","getLocalFolders","views","localView","downloadsTitleText","Type","IsFolder","ApiClientEx","clientName","applicationVersion","localAssetManager","super","onFailure","getLocalItem","MediaSources","Item","SupportsDirectPlay","SupportsDirectStream","SupportsTranscoding","IsLocal","mediaSources","fileExists","LocalPath","exists","items","Items","TotalRecordCount","AlbumIds","getViewItems","ExcludeItemIds","exItems","ids","hasLocal","getItemsFromIds","basePromise","enableLocalView","filter","getViews","IncludeItemTypes","seasonId","getLatestOfflineItems","itemid","ItemId","libraryItem","MediaType","UserData","PlaybackPositionTicks","PlayedPercentage","RunTimeTicks","addOrUpdateLocalItem","action","recordUserAction","ConnectionMode","getServerAddress","resolveFailure","State","systemInfo","ServerName","WanAddress","getEmbyServerUrl","baseUrl","handler","normalizeAddress","address","trim","stringEqualsIgnoreCase","str1","str2","ApiClientCore","AppStorage","ConnectionManager","credentialProvider","apiClientFactory","serverDiscoveryFn","capabilities","saveCredentials","servers","Servers","updateDateLastAccessed","DateLastAccessed","User","addOrUpdateServer","afterConnected","onLocalUserSignIn","enableWebSocket","_getOrAddApiClient","onLocalUserSignedIn","logoutOfServer","logoutInfo","convertEndpointAddressToManualAddress","Address","EndpointAddress","parts","portString","isNaN","manualAddressOnly","connectionMode","_apiClients","_minServerVersion","getServerInfo","getLastUsedServer","sort","addApiClient","existingServers","existingServer","LastConnectionMode","clearData","getApiClient","getOrCreateApiClient","localUser","u","image","PrimaryImageTag","supportsParams","imageUrl","supportsImageParams","promises","all","UserLinkType","j","numServers","ExchangeToken","getSavedServers","getAvailableServers","onFinish","foundServers","foundServer","findServers","responses","list1","list2","mergeServers","connectToServers","firstServer","connectToServer","minServerVersion","onSuccessfulConnection","verifyLocalAuthentication","enableAutoLogin","validateAuthentication","resolveActions","connectToAddress","deleteServer","ConnectServerId","onDone","connect","getApiClients","Credentials","clear","_credentials","set","ensure","existing","Events"],"mappings":"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","file":"jellyfin-apiclient.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","function getCallbacks(obj, name) {\n    if (!obj) {\n        throw new Error(\"obj cannot be null!\");\n    }\n\n    obj._callbacks = obj._callbacks || {};\n\n    let list = obj._callbacks[name];\n\n    if (!list) {\n        obj._callbacks[name] = [];\n        list = obj._callbacks[name];\n    }\n\n    return list;\n}\n\nexport default {\n    on(obj, eventName, fn) {\n        const list = getCallbacks(obj, eventName);\n\n        list.push(fn);\n    },\n\n    off(obj, eventName, fn) {\n        const list = getCallbacks(obj, eventName);\n\n        const i = list.indexOf(fn);\n        if (i !== -1) {\n            list.splice(i, 1);\n        }\n    },\n\n    trigger(obj, eventName) {\n        const eventObject = {\n            type: eventName\n        };\n\n        const eventArgs = [];\n        eventArgs.push(eventObject);\n\n        const additionalArgs = arguments[2] || [];\n        for (let i = 0, length = additionalArgs.length; i < length; i++) {\n            eventArgs.push(additionalArgs[i]);\n        }\n\n        const callbacks = getCallbacks(obj, eventName).slice(0);\n\n        callbacks.forEach(c => {\n            c.apply(obj, eventArgs);\n        });\n    }\n};\n","function onCachePutFail(e) {\n    console.log(e);\n}\n\nfunction updateCache(instance) {\n    const cache = instance.cache;\n    if (cache) {\n        cache.put('data', new Response(JSON.stringify(instance.localData))).catch(onCachePutFail);\n    }\n}\n\nfunction onCacheOpened(result) {\n    this.cache = result;\n    this.localData = {};\n}\n\nexport default class MyStore {\n    constructor() {\n        try {\n            if (self.caches) {\n                caches.open('embydata').then(onCacheOpened.bind(this));\n            }\n        } catch (err) {\n            console.log(`Error opening cache: ${err}`);\n        }\n    }\n\n    setItem(name, value) {\n        localStorage.setItem(name, value);\n        const localData = this.localData;\n        if (localData) {\n            const changed = localData[name] !== value;\n            if (changed) {\n                localData[name] = value;\n                updateCache(this);\n            }\n        }\n    }\n\n    getItem(name) {\n        return localStorage.getItem(name);\n    }\n\n    removeItem(name) {\n        localStorage.removeItem(name);\n        const localData = this.localData;\n        if (localData) {\n            localData[name] = null;\n            delete localData[name];\n            updateCache(this);\n        }\n    }\n}\n","/**\n * Utility module for fetching remote content.\n * @module utils/fetch\n */\nimport events from '../events';\n\n/**\n *\n * @param params\n * @returns {string}\n */\nexport function paramsToString(params) {\n    // TODO: Replace with URLSearchParams (https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams)\n    const values = [];\n\n    for (const key in params) {\n        const value = params[key];\n\n        if (value !== null && value !== undefined && value !== '') {\n            values.push(`${encodeURIComponent(key)}=${encodeURIComponent(value)}`);\n        }\n    }\n    return values.join('&');\n}\n\n/**\n *\n * @param request\n * @returns {Promise<unknown>|*}\n */\nexport function getFetchPromise(request) {\n    const headers = request.headers || {};\n\n    if (request.dataType === 'json') {\n        headers.accept = 'application/json';\n    }\n\n    const fetchRequest = {\n        headers,\n        method: request.type,\n        credentials: 'same-origin'\n    };\n\n    let contentType = request.contentType;\n\n    if (request.data) {\n        if (typeof request.data === 'string') {\n            fetchRequest.body = request.data;\n        } else {\n            fetchRequest.body = paramsToString(request.data);\n            contentType = contentType || 'application/x-www-form-urlencoded; charset=UTF-8';\n        }\n    }\n\n    if (contentType) {\n        headers['Content-Type'] = contentType;\n    }\n\n    if (!request.timeout) {\n        return fetch(request.url, fetchRequest);\n    }\n\n    return fetchWithTimeout(request.url, fetchRequest, request.timeout);\n}\n\n/**\n *\n * @param instance\n * @param url\n * @param response\n */\nexport function onFetchFail(instance, url, response) {\n    events.trigger(instance, 'requestfail', [\n        {\n            url,\n            status: response.status,\n            errorCode: response.headers ? response.headers.get('X-Application-Error-Code') : null\n        }]);\n}\n\n/**\n * Wraps around jQuery ajax methods to add additional info to the request.\n * @param request\n * @param includeAuthorization\n * @returns {*|Promise<T>}\n */\nexport function fetch(request, includeAuthorization) {\n    if (!request) {\n        throw new Error(\"Request cannot be null\");\n    }\n\n    request.headers = request.headers || {};\n\n    if (includeAuthorization !== false) {\n        this.setRequestHeaders(request.headers);\n    }\n\n    if (this.enableAutomaticNetworking === false || request.type !== \"GET\") {\n        console.log(`Requesting url without automatic networking: ${request.url}`);\n\n        return getFetchPromise(request).then((response) => {\n            this.lastFetch = new Date().getTime();\n\n            if (response.status < 400) {\n                if (request.dataType === 'json' || request.headers.accept === 'application/json') {\n                    return response.json();\n                } else if (request.dataType === 'text' || (response.headers.get('Content-Type') || '').toLowerCase().indexOf('text/') === 0) {\n                    return response.text();\n                } else {\n                    return response;\n                }\n            } else {\n                onFetchFail(this, request.url, response);\n                return Promise.reject(response);\n            }\n        }).catch((error) => {\n            onFetchFail(this, request.url, {});\n            throw error;\n        });\n    }\n\n    return this.fetchWithFailover(request, true);\n}\n\n/**\n *\n * @param url\n * @param options\n * @param timeoutMs\n * @returns {Promise<unknown>}\n */\nexport function fetchWithTimeout(url, options, timeoutMs) {\n    return new Promise((resolve, reject) => {\n        const timeout = setTimeout(reject, timeoutMs);\n\n        options = options || {};\n        options.credentials = 'same-origin';\n\n        fetch(url, options).then((response) => {\n            clearTimeout(timeout);\n            resolve(response);\n        }).catch((error) => {\n            clearTimeout(timeout);\n            reject(error);\n        });\n    });\n}\n\nexport function getTryConnectPromise(instance, url, state, resolve, reject) {\n    fetchWithTimeout(instance.getUrl('system/info/public', null, url), {\n        method: 'GET',\n        accept: 'application/json'\n    }, 15000).then(() => {\n        if (!state.resolved) {\n            state.resolved = true;\n\n            console.log(\"Reconnect succeeded to \" + url);\n            instance.serverAddress(url);\n            resolve();\n        }\n    }).catch(() => {\n        if (!state.resolved) {\n            console.log(\"Reconnect failed to \" + url);\n\n            state.rejects++;\n            if (state.rejects >= state.numAddresses) {\n                reject();\n            }\n        }\n    });\n}\n\nfunction tryReconnectInternal(instance) {\n    const addresses = [];\n    const addressesStrings = [];\n\n    const serverInfo = instance.serverInfo();\n    if (serverInfo.LocalAddress && addressesStrings.indexOf(serverInfo.LocalAddress) === -1) {\n        addresses.push({ url: serverInfo.LocalAddress, timeout: 0 });\n        addressesStrings.push(addresses[addresses.length - 1].url);\n    }\n    if (serverInfo.ManualAddress && addressesStrings.indexOf(serverInfo.ManualAddress) === -1) {\n        addresses.push({ url: serverInfo.ManualAddress, timeout: 100 });\n        addressesStrings.push(addresses[addresses.length - 1].url);\n    }\n    if (serverInfo.RemoteAddress && addressesStrings.indexOf(serverInfo.RemoteAddress) === -1) {\n        addresses.push({ url: serverInfo.RemoteAddress, timeout: 200 });\n        addressesStrings.push(addresses[addresses.length - 1].url);\n    }\n\n    console.log('tryReconnect: ' + addressesStrings.join('|'));\n\n    return new Promise((resolve, reject) => {\n        const state = {};\n        state.numAddresses = addresses.length;\n        state.rejects = 0;\n\n        addresses.map((url) => {\n            setTimeout(() => {\n                if (!state.resolved) {\n                    getTryConnectPromise(instance, url.url, state, resolve, reject);\n                }\n            }, url.timeout);\n        });\n    });\n}\n\nexport function tryReconnect(instance, retryCount) {\n    retryCount = retryCount || 0;\n\n    if (retryCount >= 20) {\n        return Promise.reject();\n    }\n\n    return tryReconnectInternal(instance).catch((err) => {\n        console.log('error in tryReconnectInternal: ' + (err || ''));\n\n        return new Promise((resolve, reject) => {\n            setTimeout(() => {\n                tryReconnect(instance, retryCount + 1).then(resolve, reject);\n            }, 500);\n        });\n    });\n}\n","/**\n * Utility module for bitrate detection\n * @module utils/bitrate\n */\n\nexport function stopBitrateDetection(instance) {\n    if (instance.detectTimeout) {\n        clearTimeout(instance.detectTimeout);\n    }\n}\n\nfunction redetectBitrateInternal() {\n    if (this.accessToken()) {\n        this.detectBitrate();\n    }\n}\n\nexport function redetectBitrate(instance) {\n    stopBitrateDetection(instance);\n\n    if (instance.accessToken() && instance.enableAutomaticBitrateDetection !== false) {\n        setTimeout(redetectBitrateInternal.bind(instance), 6000);\n    }\n}\n\nexport function normalizeReturnBitrate(instance, bitrate) {\n    if (!bitrate) {\n        if (instance.lastDetectedBitrate) {\n            return instance.lastDetectedBitrate;\n        }\n\n        return Promise.reject();\n    }\n\n    let result = Math.round(bitrate * 0.7);\n\n    // allow configuration of this\n    if (instance.getMaxBandwidth) {\n        const maxRate = instance.getMaxBandwidth();\n        if (maxRate) {\n            result = Math.min(result, maxRate);\n        }\n    }\n\n    instance.lastDetectedBitrate = result;\n    instance.lastDetectedBitrateTime = new Date().getTime();\n\n    return result;\n}\n\nfunction detectBitrateInternal(instance, tests, index, currentBitrate) {\n    if (index >= tests.length) {\n        return normalizeReturnBitrate(instance, currentBitrate);\n    }\n\n    const test = tests[index];\n\n    return instance.getDownloadSpeed(test.bytes).then(bitrate => {\n        if (bitrate < test.threshold) {\n            return normalizeReturnBitrate(instance, bitrate);\n        } else {\n            return detectBitrateInternal(instance, tests, index + 1, bitrate);\n        }\n    }).catch(() => normalizeReturnBitrate(instance, currentBitrate));\n}\n\nexport function detectBitrateWithEndpointInfo(instance, endpointInfo) {\n    if (endpointInfo.IsInNetwork) {\n        const result = 140000000;\n        instance.lastDetectedBitrate = result;\n        instance.lastDetectedBitrateTime = new Date().getTime();\n        return result;\n    }\n\n    return detectBitrateInternal(instance, [\n        {\n            bytes: 500000,\n            threshold: 500000\n        },\n        {\n            bytes: 1000000,\n            threshold: 20000000\n        },\n        {\n            bytes: 3000000,\n            threshold: 50000000\n        }], 0);\n}\n","/**\n * Utility module for websocket.\n * @module utils/websocket\n */\nimport events from '../events';\n\nconst messageIdsReceived = {};\n\nexport function onMessageReceivedInternal(instance, msg) {\n    const messageId = msg.MessageId;\n    if (messageId) {\n        // message was already received via another protocol\n        if (messageIdsReceived[messageId]) {\n            return;\n        }\n\n        messageIdsReceived[messageId] = true;\n    }\n\n    if (msg.MessageType === \"UserDeleted\") {\n        instance._currentUser = null;\n    }\n    else if (msg.MessageType === \"UserUpdated\" || msg.MessageType === \"UserConfigurationUpdated\") {\n        const user = msg.Data;\n        if (user.Id === instance.getCurrentUserId()) {\n            instance._currentUser = null;\n        }\n    }\n\n    events.trigger(instance, 'message', [msg]);\n}\n\nexport function onWebSocketMessage(msg) {\n    msg = JSON.parse(msg.data);\n    onMessageReceivedInternal(this, msg);\n}\n\nexport function onWebSocketOpen() {\n    console.log('web socket connection opened');\n    events.trigger(this, 'websocketopen');\n}\n\nexport function onWebSocketError() {\n    events.trigger(this, 'websocketerror');\n}\n\nexport function setSocketOnClose(apiClient, socket) {\n    socket.onclose = () => {\n        console.log('web socket closed');\n\n        if (apiClient._webSocket === socket) {\n            console.log('nulling out web socket');\n            apiClient._webSocket = null;\n        }\n\n        setTimeout(() => {\n            events.trigger(apiClient, 'websocketclose');\n        }, 0);\n    };\n}\n","/**\n * Utility module for string operations\n * @module utils/strings\n */\n\nexport function replaceAll(originalString, strReplace, strWith) {\n    const reg = new RegExp(strReplace, 'ig');\n    return originalString.replace(reg, strWith);\n}\n\nexport function compareVersions(a, b) {\n    // -1 a is smaller\n    // 1 a is larger\n    // 0 equal\n    a = a.split('.');\n    b = b.split('.');\n\n    for (let i = 0, length = Math.max(a.length, b.length); i < length; i++) {\n        const aVal = parseInt(a[i] || '0');\n        const bVal = parseInt(b[i] || '0');\n\n        if (aVal < bVal) {\n            return -1;\n        }\n\n        if (aVal > bVal) {\n            return 1;\n        }\n    }\n\n    return 0;\n}\n","/**\n * Utility module for dealing with some instance operations\n * @module utils/instance\n */\n\nexport function setSavedEndpointInfo(instance, info) {\n    instance._endPointInfo = info;\n}\n\nexport function getCachedUser(instance, userId) {\n    const serverId = instance.serverId();\n    if (!serverId) {\n        return null;\n    }\n\n    const json = instance.appStorage.getItem(`user-${userId}-${serverId}`);\n\n    if (json) {\n        return JSON.parse(json);\n    }\n\n    return null;\n}\n\nexport function getRemoteImagePrefix(instance, options) {\n    let urlPrefix;\n\n    if (options.artist) {\n        urlPrefix = `Artists/${instance.encodeName(options.artist)}`;\n        delete options.artist;\n    } else if (options.person) {\n        urlPrefix = `Persons/${instance.encodeName(options.person)}`;\n        delete options.person;\n    } else if (options.genre) {\n        urlPrefix = `Genres/${instance.encodeName(options.genre)}`;\n        delete options.genre;\n    } else if (options.musicGenre) {\n        urlPrefix = `MusicGenres/${instance.encodeName(options.musicGenre)}`;\n        delete options.musicGenre;\n    } else if (options.studio) {\n        urlPrefix = `Studios/${instance.encodeName(options.studio)}`;\n        delete options.studio;\n    } else {\n        urlPrefix = `Items/${options.itemId}`;\n        delete options.itemId;\n    }\n\n    return urlPrefix;\n}\n\nexport function normalizeImageOptions(instance, options) {\n    let ratio = instance._devicePixelRatio || 1;\n\n    if (ratio) {\n        if (options.minScale) {\n            ratio = Math.max(options.minScale, ratio);\n        }\n        if (options.width) {\n            options.width = Math.round(options.width * ratio);\n        }\n        if (options.height) {\n            options.height = Math.round(options.height * ratio);\n        }\n        if (options.maxWidth) {\n            options.maxWidth = Math.round(options.maxWidth * ratio);\n        }\n        if (options.maxHeight) {\n            options.maxHeight = Math.round(options.maxHeight * ratio);\n        }\n    }\n\n    options.quality = options.quality || instance.getDefaultImageQuality(options.type);\n\n    if (instance.normalizeImageOptions) {\n        instance.normalizeImageOptions(options);\n    }\n}","import events from './events';\nimport appStorage from './appStorage';\nimport { fetch, fetchWithTimeout, getFetchPromise, getTryConnectPromise, onFetchFail, paramsToString, tryReconnect } from './utils/fetch';\nimport { detectBitrateWithEndpointInfo, normalizeReturnBitrate, redetectBitrate, stopBitrateDetection } from './utils/bitrate';\nimport { onMessageReceivedInternal, onWebSocketError, onWebSocketMessage, onWebSocketOpen, setSocketOnClose } from './utils/websocket';\nimport { compareVersions, replaceAll } from './utils/strings';\nimport { getCachedUser, getRemoteImagePrefix, normalizeImageOptions, setSavedEndpointInfo } from './utils/instance';\n\n/**\n * Creates a new api client instance\n * @param {String} serverAddress\n * @param {String} appName\n * @param {String} appVersion\n */\nclass ApiClient {\n    constructor(\n        serverAddress,\n        appName,\n        appVersion,\n        deviceName,\n        deviceId) {\n\n        if (!serverAddress) {\n            throw new Error(\"Must supply a serverAddress\");\n        }\n\n        console.debug(`ApiClient serverAddress: ${serverAddress}`);\n        console.debug(`ApiClient appName: ${appName}`);\n        console.debug(`ApiClient appVersion: ${appVersion}`);\n        console.debug(`ApiClient deviceName: ${deviceName}`);\n        console.debug(`ApiClient deviceId: ${deviceId}`);\n\n        this._serverInfo = {};\n        this._serverAddress = serverAddress;\n        this._deviceId = deviceId;\n        this._deviceName = deviceName;\n        this._appName = appName;\n        this._appVersion = appVersion;\n        this._devicePixelRatio = devicePixelRatio;\n    }\n\n    appName() {\n        return this._appName;\n    }\n\n    setRequestHeaders(headers) {\n        const currentServerInfo = this.serverInfo();\n        const appName = this._appName;\n        const accessToken = currentServerInfo.AccessToken;\n\n        const values = [];\n\n        if (appName) {\n            values.push(`Client=\"${appName}\"`);\n        }\n\n        if (this._deviceName) {\n            values.push(`Device=\"${this._deviceName}\"`);\n        }\n\n        if (this._deviceId) {\n            values.push(`DeviceId=\"${this._deviceId}\"`);\n        }\n\n        if (this._appVersion) {\n            values.push(`Version=\"${this._appVersion}\"`);\n        }\n\n        if (accessToken) {\n            values.push(`Token=\"${accessToken}\"`);\n        }\n\n        if (values.length) {\n            const auth = `MediaBrowser ${values.join(', ')}`;\n            //headers.Authorization = auth;\n            headers['X-Emby-Authorization'] = auth;\n        }\n    }\n\n    appVersion() {\n        return this._appVersion;\n    }\n\n    deviceName() {\n        return this._deviceName;\n    }\n\n    deviceId() {\n        return this._deviceId;\n    }\n\n    /**\n     * Gets the server address.\n     */\n    serverAddress(val) {\n        if (val != null) {\n            if (val.toLowerCase().indexOf('http') !== 0) {\n                throw new Error(`Invalid url: ${val}`);\n            }\n\n            const changed = val !== this._serverAddress;\n\n            this._serverAddress = val;\n\n            this.onNetworkChange();\n\n            if (changed) {\n                events.trigger(this, 'serveraddresschanged');\n            }\n        }\n\n        return this._serverAddress;\n    }\n\n    onNetworkChange() {\n        this.lastDetectedBitrate = 0;\n        this.lastDetectedBitrateTime = 0;\n        setSavedEndpointInfo(this, null);\n\n        redetectBitrate(this);\n    }\n\n    /**\n     * Creates an api url based on a handler name and query string parameters\n     * @param {String} name\n     * @param {Object} params\n     */\n    getUrl(name, params) {\n        if (!name) {\n            throw new Error(\"Url name cannot be empty\");\n        }\n\n        let url = this._serverAddress;\n\n        if (!url) {\n            throw new Error(\"serverAddress is yet not set\");\n        }\n\n        if (name.charAt(0) !== '/') {\n            url += '/';\n        }\n\n        url += name;\n\n        if (params) {\n            params = paramsToString(params);\n            if (params) {\n                url += `?${params}`;\n            }\n        }\n\n        return url;\n    }\n\n    fetchWithFailover(request, enableReconnection) {\n\n        console.log(`Requesting ${request.url}`);\n\n        request.timeout = 30000;\n        const instance = this;\n\n        return getFetchPromise(request).then(response => {\n            instance.lastFetch = new Date().getTime();\n\n            if (response.status < 400) {\n                if (request.dataType === 'json' || request.headers.accept === 'application/json') {\n                    return response.json();\n                } else if (request.dataType === 'text' || (response.headers.get('Content-Type') || '').toLowerCase().indexOf('text/') === 0) {\n                    return response.text();\n                } else {\n                    return response;\n                }\n            } else {\n                onFetchFail(instance, request.url, response);\n                return Promise.reject(response);\n            }\n\n        }, error => {\n            if (error) {\n                console.log(`Request failed to ${request.url} ${error.toString()}`);\n            } else {\n                console.log(`Request timed out to ${request.url}`);\n            }\n\n            // http://api.jquery.com/jQuery.ajax/\n            if ((!error || !error.status) && enableReconnection) {\n                console.log(\"Attempting reconnection\");\n\n                const previousServerAddress = instance.serverAddress();\n\n                return tryReconnect(instance).then(() => {\n                    console.log(\"Reconnect succeesed\");\n                    request.url = request.url.replace(previousServerAddress, instance.serverAddress());\n\n                    return instance.fetchWithFailover(request, false);\n                }, innerError => {\n                    console.log(\"Reconnect failed\");\n                    onFetchFail(instance, request.url, {});\n                    throw innerError;\n                });\n            } else {\n                console.log(\"Reporting request failure\");\n\n                onFetchFail(instance, request.url, {});\n                throw error;\n            }\n        });\n    }\n\n    setAuthenticationInfo(accessKey, userId) {\n        this._currentUser = null;\n\n        this._serverInfo.AccessToken = accessKey;\n        this._serverInfo.UserId = userId;\n        redetectBitrate(this);\n    }\n\n    serverInfo(info) {\n        if (info) {\n            this._serverInfo = info;\n        }\n\n        return this._serverInfo;\n    }\n\n    /**\n     * Gets or sets the current user id.\n     */\n    getCurrentUserId() {\n        return this._serverInfo.UserId;\n    }\n\n    accessToken() {\n        return this._serverInfo.AccessToken;\n    }\n\n    serverId() {\n        return this.serverInfo().Id;\n    }\n\n    serverName() {\n        return this.serverInfo().Name;\n    }\n\n    /**\n     * Wraps around jQuery ajax methods to add additional info to the request.\n     */\n    ajax(request, includeAuthorization) {\n        if (!request) {\n            throw new Error(\"Request cannot be null\");\n        }\n\n        return fetch(request, includeAuthorization);\n    }\n\n    /**\n     * Gets or sets the current user id.\n     */\n    getCurrentUser(enableCache) {\n        if (this._currentUser) {\n            return Promise.resolve(this._currentUser);\n        }\n\n        const userId = this.getCurrentUserId();\n\n        if (!userId) {\n            return Promise.reject();\n        }\n\n        const instance = this;\n        let user;\n\n        const serverPromise = this.getUser(userId).then(user => {\n            appStorage.setItem(`user-${user.Id}-${user.ServerId}`, JSON.stringify(user));\n\n            instance._currentUser = user;\n            return user;\n\n        }).catch((response) => {\n            // if timed out, look for cached value\n            if (!response.status) {\n\n                if (userId && instance.accessToken()) {\n                    user = getCachedUser(instance, userId);\n                    if (user) {\n                        return Promise.resolve(user);\n                    }\n                }\n            }\n\n            throw response;\n        });\n\n        if (!this.lastFetch && enableCache !== false) {\n            user = getCachedUser(instance, userId);\n            if (user) {\n                return Promise.resolve(user);\n            }\n        }\n\n        return serverPromise;\n    }\n\n    isLoggedIn() {\n        const info = this.serverInfo();\n        if (info) {\n            if (info.UserId && info.AccessToken) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Logout current user\n     */\n    logout() {\n        stopBitrateDetection(this);\n        this.closeWebSocket();\n\n        const done = () => {\n            const info = this.serverInfo();\n            if (info && info.UserId && info.Id) {\n                appStorage.removeItem(`user-${info.UserId}-${info.Id}`);\n            }\n            this.setAuthenticationInfo(null, null);\n        };\n\n        if (this.accessToken()) {\n            const url = this.getUrl(\"Sessions/Logout\");\n\n            return this.ajax({\n                type: \"POST\",\n                url\n\n            }).then(done, done);\n        }\n\n        done();\n        return Promise.resolve();\n    }\n\n    /**\n     * Authenticates a user\n     * @param {String} name\n     * @param {String} password\n     */\n    authenticateUserByName(name, password) {\n        if (!name) {\n            return Promise.reject();\n        }\n\n        const url = this.getUrl(\"Users/authenticatebyname\");\n        const instance = this;\n\n        return new Promise((resolve, reject) => {\n\n            const postData = {\n                Username: name,\n                Pw: password || ''\n            };\n\n            instance.ajax({\n                type: \"POST\",\n                url,\n                data: JSON.stringify(postData),\n                dataType: \"json\",\n                contentType: \"application/json\"\n\n            }).then(result => {\n\n                const afterOnAuthenticated = () => {\n                    redetectBitrate(instance);\n                    resolve(result);\n                };\n\n                if (instance.onAuthenticated) {\n                    instance.onAuthenticated(instance, result).then(afterOnAuthenticated);\n                } else {\n                    afterOnAuthenticated();\n                }\n\n            }).catch(reject);\n        });\n    }\n\n    ensureWebSocket() {\n        if (this.isWebSocketOpenOrConnecting() || !this.isWebSocketSupported()) {\n            return;\n        }\n\n        try {\n            this.openWebSocket();\n        } catch (err) {\n            console.log(`Error opening web socket: ${err}`);\n        }\n    }\n\n    openWebSocket() {\n        const accessToken = this.accessToken();\n\n        if (!accessToken) {\n            throw new Error(\"Cannot open web socket without access token.\");\n        }\n\n        let url = this.getUrl(\"socket\");\n\n        url = replaceAll(url, 'emby/socket', 'embywebsocket');\n        url = replaceAll(url, 'https:', 'wss:');\n        url = replaceAll(url, 'http:', 'ws:');\n\n        url += `?api_key=${accessToken}`;\n        url += `&deviceId=${this.deviceId()}`;\n\n        console.log(`opening web socket with url: ${url}`);\n\n        const webSocket = new WebSocket(url);\n\n        webSocket.onmessage = onWebSocketMessage.bind(this);\n        webSocket.onopen = onWebSocketOpen.bind(this);\n        webSocket.onerror = onWebSocketError.bind(this);\n        setSocketOnClose(this, webSocket);\n\n        this._webSocket = webSocket;\n    }\n\n    closeWebSocket() {\n        const socket = this._webSocket;\n\n        if (socket && socket.readyState === WebSocket.OPEN) {\n            socket.close();\n        }\n    }\n\n    sendWebSocketMessage(name, data) {\n        console.log(`Sending web socket message: ${name}`);\n\n        let msg = { MessageType: name };\n\n        if (data) {\n            msg.Data = data;\n        }\n\n        msg = JSON.stringify(msg);\n\n        this._webSocket.send(msg);\n    }\n\n    sendMessage(name, data) {\n        if (this.isWebSocketOpen()) {\n            this.sendWebSocketMessage(name, data);\n        }\n    }\n\n    isMessageChannelOpen() {\n        return this.isWebSocketOpen();\n    }\n\n    isWebSocketOpen() {\n        const socket = this._webSocket;\n\n        if (socket) {\n            return socket.readyState === WebSocket.OPEN;\n        }\n        return false;\n    }\n\n    isWebSocketOpenOrConnecting() {\n        const socket = this._webSocket;\n\n        if (socket) {\n            return socket.readyState === WebSocket.OPEN || socket.readyState === WebSocket.CONNECTING;\n        }\n        return false;\n    }\n\n    get(url) {\n        return this.ajax({\n            type: \"GET\",\n            url\n        });\n    }\n\n    getJSON(url, includeAuthorization) {\n        return fetch({\n\n            url,\n            type: 'GET',\n            dataType: 'json',\n            headers: {\n                accept: 'application/json'\n            }\n\n        }, includeAuthorization);\n    }\n\n    updateServerInfo(server, serverUrl) {\n        if (server == null) {\n            throw new Error('server cannot be null');\n        }\n\n        this.serverInfo(server);\n\n        if (!serverUrl) {\n            throw new Error(`serverUrl cannot be null. serverInfo: ${JSON.stringify(server)}`);\n        }\n        console.log(`Setting server address to ${serverUrl}`);\n        this.serverAddress(serverUrl);\n    }\n\n    isWebSocketSupported() {\n        try {\n            return WebSocket != null;\n        }\n        catch (err) {\n            return false;\n        }\n    }\n\n    clearAuthenticationInfo() {\n        this.setAuthenticationInfo(null, null);\n    }\n\n    encodeName(name) {\n        name = name.split('/').join('-');\n        name = name.split('&').join('-');\n        name = name.split('?').join('-');\n\n        const val = paramsToString({ name });\n        return val.substring(val.indexOf('=') + 1).replace(\"'\", '%27');\n    }\n\n    getDownloadSpeed(byteSize) {\n        const url = this.getUrl('Playback/BitrateTest', {\n\n            Size: byteSize\n        });\n\n        const now = new Date().getTime();\n\n        return this.ajax({\n            type: \"GET\",\n            url,\n            timeout: 5000\n\n        }).then(() => {\n\n            const responseTimeSeconds = (new Date().getTime() - now) / 1000;\n            const bytesPerSecond = byteSize / responseTimeSeconds;\n            const bitrate = Math.round(bytesPerSecond * 8);\n\n            return bitrate;\n        });\n    }\n\n    detectBitrate(force) {\n        if (!force && this.lastDetectedBitrate && (new Date().getTime() - (this.lastDetectedBitrateTime || 0)) <= 3600000) {\n            return Promise.resolve(this.lastDetectedBitrate);\n        }\n\n        const instance = this;\n\n        return this.getEndpointInfo().then(info => detectBitrateWithEndpointInfo(instance, info), info => detectBitrateWithEndpointInfo(instance, {}));\n    }\n\n    /**\n     * Gets an item from the server\n     * Omit itemId to get the root folder.\n     */\n    getItem(userId, itemId) {\n        if (!itemId) {\n            throw new Error(\"null itemId\");\n        }\n\n        const url = userId ?\n            this.getUrl(`Users/${userId}/Items/${itemId}`) :\n            this.getUrl(`Items/${itemId}`);\n\n        return this.getJSON(url);\n    }\n\n    /**\n     * Gets the root folder from the server\n     */\n    getRootFolder(userId) {\n        if (!userId) {\n            throw new Error(\"null userId\");\n        }\n\n        const url = this.getUrl(`Users/${userId}/Items/Root`);\n\n        return this.getJSON(url);\n    }\n\n    getNotificationSummary(userId) {\n        if (!userId) {\n            throw new Error(\"null userId\");\n        }\n\n        const url = this.getUrl(`Notifications/${userId}/Summary`);\n\n        return this.getJSON(url);\n    }\n\n    getNotifications(userId, options) {\n        if (!userId) {\n            throw new Error(\"null userId\");\n        }\n\n        const url = this.getUrl(`Notifications/${userId}`, options || {});\n\n        return this.getJSON(url);\n    }\n\n    markNotificationsRead(userId, idList, isRead) {\n        if (!userId) {\n            throw new Error(\"null userId\");\n        }\n\n        if (!idList) {\n            throw new Error(\"null idList\");\n        }\n\n        const suffix = isRead ? \"Read\" : \"Unread\";\n\n        const params = {\n            UserId: userId,\n            Ids: idList.join(',')\n        };\n\n        const url = this.getUrl(`Notifications/${userId}/${suffix}`, params);\n\n        return this.ajax({\n            type: \"POST\",\n            url\n        });\n    }\n\n    getRemoteImageProviders(options) {\n        if (!options) {\n            throw new Error(\"null options\");\n        }\n\n        const urlPrefix = getRemoteImagePrefix(this, options);\n\n        const url = this.getUrl(`${urlPrefix}/RemoteImages/Providers`, options);\n\n        return this.getJSON(url);\n    }\n\n    getAvailableRemoteImages(options) {\n        if (!options) {\n            throw new Error(\"null options\");\n        }\n\n        const urlPrefix = getRemoteImagePrefix(this, options);\n\n        const url = this.getUrl(`${urlPrefix}/RemoteImages`, options);\n\n        return this.getJSON(url);\n    }\n\n    downloadRemoteImage(options) {\n        if (!options) {\n            throw new Error(\"null options\");\n        }\n\n        const urlPrefix = getRemoteImagePrefix(this, options);\n\n        const url = this.getUrl(`${urlPrefix}/RemoteImages/Download`, options);\n\n        return this.ajax({\n            type: \"POST\",\n            url\n        });\n    }\n\n    getRecordingFolders(userId) {\n        const url = this.getUrl(\"LiveTv/Recordings/Folders\", { userId: userId });\n\n        return this.getJSON(url);\n    }\n\n    getLiveTvInfo(options) {\n        const url = this.getUrl(\"LiveTv/Info\", options || {});\n\n        return this.getJSON(url);\n    }\n\n    getLiveTvGuideInfo(options) {\n        const url = this.getUrl(\"LiveTv/GuideInfo\", options || {});\n\n        return this.getJSON(url);\n    }\n\n    getLiveTvChannel(id, userId) {\n        if (!id) {\n            throw new Error(\"null id\");\n        }\n\n        const options = {};\n\n        if (userId) {\n            options.userId = userId;\n        }\n\n        const url = this.getUrl(`LiveTv/Channels/${id}`, options);\n\n        return this.getJSON(url);\n    }\n\n    getLiveTvChannels(options) {\n        const url = this.getUrl(\"LiveTv/Channels\", options || {});\n\n        return this.getJSON(url);\n    }\n\n    getLiveTvPrograms(options = {}) {\n        if (options.channelIds && options.channelIds.length > 1800) {\n            return this.ajax({\n                type: \"POST\",\n                url: this.getUrl(\"LiveTv/Programs\"),\n                data: JSON.stringify(options),\n                contentType: \"application/json\",\n                dataType: \"json\"\n            });\n        } else {\n            return this.ajax({\n                type: \"GET\",\n                url: this.getUrl(\"LiveTv/Programs\", options),\n                dataType: \"json\"\n            });\n        }\n    }\n\n    getLiveTvRecommendedPrograms(options = {}) {\n        return this.ajax({\n            type: \"GET\",\n            url: this.getUrl(\"LiveTv/Programs/Recommended\", options),\n            dataType: \"json\"\n        });\n    }\n\n    getLiveTvRecordings(options) {\n        const url = this.getUrl(\"LiveTv/Recordings\", options || {});\n\n        return this.getJSON(url);\n    }\n\n    getLiveTvRecordingSeries(options) {\n        const url = this.getUrl(\"LiveTv/Recordings/Series\", options || {});\n\n        return this.getJSON(url);\n    }\n\n    getLiveTvRecordingGroups(options) {\n        const url = this.getUrl(\"LiveTv/Recordings/Groups\", options || {});\n\n        return this.getJSON(url);\n    }\n\n    getLiveTvRecordingGroup(id) {\n        if (!id) {\n            throw new Error(\"null id\");\n        }\n\n        const url = this.getUrl(`LiveTv/Recordings/Groups/${id}`);\n\n        return this.getJSON(url);\n    }\n\n    getLiveTvRecording(id, userId) {\n        if (!id) {\n            throw new Error(\"null id\");\n        }\n\n        const options = {};\n\n        if (userId) {\n            options.userId = userId;\n        }\n\n        const url = this.getUrl(`LiveTv/Recordings/${id}`, options);\n\n        return this.getJSON(url);\n    }\n\n    getLiveTvProgram(id, userId) {\n        if (!id) {\n            throw new Error(\"null id\");\n        }\n\n        const options = {};\n\n        if (userId) {\n            options.userId = userId;\n        }\n\n        const url = this.getUrl(`LiveTv/Programs/${id}`, options);\n\n        return this.getJSON(url);\n    }\n\n    deleteLiveTvRecording(id) {\n        if (!id) {\n            throw new Error(\"null id\");\n        }\n\n        const url = this.getUrl(`LiveTv/Recordings/${id}`);\n\n        return this.ajax({\n            type: \"DELETE\",\n            url\n        });\n    }\n\n    cancelLiveTvTimer(id) {\n        if (!id) {\n            throw new Error(\"null id\");\n        }\n\n        const url = this.getUrl(`LiveTv/Timers/${id}`);\n\n        return this.ajax({\n            type: \"DELETE\",\n            url\n        });\n    }\n\n    getLiveTvTimers(options) {\n        const url = this.getUrl(\"LiveTv/Timers\", options || {});\n\n        return this.getJSON(url);\n    }\n\n    getLiveTvTimer(id) {\n        if (!id) {\n            throw new Error(\"null id\");\n        }\n\n        const url = this.getUrl(`LiveTv/Timers/${id}`);\n\n        return this.getJSON(url);\n    }\n\n    getNewLiveTvTimerDefaults(options = {}) {\n        const url = this.getUrl(\"LiveTv/Timers/Defaults\", options);\n\n        return this.getJSON(url);\n    }\n\n    createLiveTvTimer(item) {\n        if (!item) {\n            throw new Error(\"null item\");\n        }\n\n        const url = this.getUrl(\"LiveTv/Timers\");\n\n        return this.ajax({\n            type: \"POST\",\n            url,\n            data: JSON.stringify(item),\n            contentType: \"application/json\"\n        });\n    }\n\n    updateLiveTvTimer(item) {\n        if (!item) {\n            throw new Error(\"null item\");\n        }\n\n        const url = this.getUrl(`LiveTv/Timers/${item.Id}`);\n\n        return this.ajax({\n            type: \"POST\",\n            url,\n            data: JSON.stringify(item),\n            contentType: \"application/json\"\n        });\n    }\n\n    resetLiveTvTuner(id) {\n        if (!id) {\n            throw new Error(\"null id\");\n        }\n\n        const url = this.getUrl(`LiveTv/Tuners/${id}/Reset`);\n\n        return this.ajax({\n            type: \"POST\",\n            url\n        });\n    }\n\n    getLiveTvSeriesTimers(options) {\n        const url = this.getUrl(\"LiveTv/SeriesTimers\", options || {});\n\n        return this.getJSON(url);\n    }\n\n    getLiveTvSeriesTimer(id) {\n        if (!id) {\n            throw new Error(\"null id\");\n        }\n\n        const url = this.getUrl(`LiveTv/SeriesTimers/${id}`);\n\n        return this.getJSON(url);\n    }\n\n    cancelLiveTvSeriesTimer(id) {\n        if (!id) {\n            throw new Error(\"null id\");\n        }\n\n        const url = this.getUrl(`LiveTv/SeriesTimers/${id}`);\n\n        return this.ajax({\n            type: \"DELETE\",\n            url\n        });\n    }\n\n    createLiveTvSeriesTimer(item) {\n        if (!item) {\n            throw new Error(\"null item\");\n        }\n\n        const url = this.getUrl(\"LiveTv/SeriesTimers\");\n\n        return this.ajax({\n            type: \"POST\",\n            url,\n            data: JSON.stringify(item),\n            contentType: \"application/json\"\n        });\n    }\n\n    updateLiveTvSeriesTimer(item) {\n        if (!item) {\n            throw new Error(\"null item\");\n        }\n\n        const url = this.getUrl(`LiveTv/SeriesTimers/${item.Id}`);\n\n        return this.ajax({\n            type: \"POST\",\n            url,\n            data: JSON.stringify(item),\n            contentType: \"application/json\"\n        });\n    }\n\n    getRegistrationInfo(feature) {\n        const url = this.getUrl(`Registrations/${feature}`);\n\n        return this.getJSON(url);\n    }\n\n    /**\n     * Gets the current server status\n     */\n    getSystemInfo(itemId) {\n        const url = this.getUrl(\"System/Info\");\n\n        const instance = this;\n\n        return this.getJSON(url).then(info => {\n\n            instance.setSystemInfo(info);\n            return Promise.resolve(info);\n        });\n    }\n\n    getSyncStatus() {\n        const url = this.getUrl(\"Sync/\" + itemId + \"/Status\");\n\n        return this.ajax({\n            url: url,\n            type: 'POST',\n            dataType: 'json',\n            contentType: \"application/json\",\n            data: JSON.stringify({\n                TargetId: this.deviceId()\n            })\n        });\n    }\n\n    /**\n     * Gets the current server status\n     */\n    getPublicSystemInfo() {\n        const url = this.getUrl(\"System/Info/Public\");\n\n        const instance = this;\n\n        return this.getJSON(url).then(info => {\n\n            instance.setSystemInfo(info);\n            return Promise.resolve(info);\n        });\n    }\n\n    getInstantMixFromItem(itemId, options) {\n        const url = this.getUrl(`Items/${itemId}/InstantMix`, options);\n\n        return this.getJSON(url);\n    }\n\n    getEpisodes(itemId, options) {\n        const url = this.getUrl(`Shows/${itemId}/Episodes`, options);\n\n        return this.getJSON(url);\n    }\n\n    getDisplayPreferences(id, userId, app) {\n        const url = this.getUrl(`DisplayPreferences/${id}`, {\n            userId,\n            client: app\n        });\n\n        return this.getJSON(url);\n    }\n\n    updateDisplayPreferences(id, obj, userId, app) {\n        const url = this.getUrl(`DisplayPreferences/${id}`, {\n            userId,\n            client: app\n        });\n\n        return this.ajax({\n            type: \"POST\",\n            url,\n            data: JSON.stringify(obj),\n            contentType: \"application/json\"\n        });\n    }\n\n    getSeasons(itemId, options) {\n        const url = this.getUrl(`Shows/${itemId}/Seasons`, options);\n\n        return this.getJSON(url);\n    }\n\n    getSimilarItems(itemId, options) {\n        const url = this.getUrl(`Items/${itemId}/Similar`, options);\n\n        return this.getJSON(url);\n    }\n\n    /**\n     * Gets all cultures known to the server\n     */\n    getCultures() {\n        const url = this.getUrl(\"Localization/cultures\");\n\n        return this.getJSON(url);\n    }\n\n    /**\n     * Gets all countries known to the server\n     */\n    getCountries() {\n        const url = this.getUrl(\"Localization/countries\");\n\n        return this.getJSON(url);\n    }\n\n    getPlaybackInfo(itemId, options, deviceProfile) {\n        const postData = {\n            DeviceProfile: deviceProfile\n        };\n\n        return this.ajax({\n            url: this.getUrl(`Items/${itemId}/PlaybackInfo`, options),\n            type: 'POST',\n            data: JSON.stringify(postData),\n            contentType: \"application/json\",\n            dataType: \"json\"\n        });\n    }\n\n    getLiveStreamMediaInfo(liveStreamId) {\n        const postData = {\n            LiveStreamId: liveStreamId\n        };\n\n        return this.ajax({\n            url: this.getUrl('LiveStreams/MediaInfo'),\n            type: 'POST',\n            data: JSON.stringify(postData),\n            contentType: \"application/json\",\n            dataType: \"json\"\n        });\n    }\n\n    getIntros(itemId) {\n        return this.getJSON(this.getUrl(`Users/${this.getCurrentUserId()}/Items/${itemId}/Intros`));\n    }\n\n    /**\n     * Gets the directory contents of a path on the server\n     */\n    getDirectoryContents(path, options) {\n        if (!path) {\n            throw new Error(\"null path\");\n        }\n        if (typeof (path) !== 'string') {\n            throw new Error('invalid path');\n        }\n\n        options = options || {};\n\n        options.path = path;\n\n        const url = this.getUrl(\"Environment/DirectoryContents\", options);\n\n        return this.getJSON(url);\n    }\n\n    /**\n     * Gets shares from a network device\n     */\n    getNetworkShares(path) {\n        if (!path) {\n            throw new Error(\"null path\");\n        }\n\n        const options = {};\n        options.path = path;\n\n        const url = this.getUrl(\"Environment/NetworkShares\", options);\n\n        return this.getJSON(url);\n    }\n\n    /**\n     * Gets the parent of a given path\n     */\n    getParentPath(path) {\n        if (!path) {\n            throw new Error(\"null path\");\n        }\n\n        const options = {};\n        options.path = path;\n\n        const url = this.getUrl(\"Environment/ParentPath\", options);\n\n        return this.ajax({\n            type: \"GET\",\n            url,\n            dataType: 'text'\n        });\n    }\n\n    /**\n     * Gets a list of physical drives from the server\n     */\n    getDrives() {\n        const url = this.getUrl(\"Environment/Drives\");\n\n        return this.getJSON(url);\n    }\n\n    /**\n     * Gets a list of network devices from the server\n     */\n    getNetworkDevices() {\n        const url = this.getUrl(\"Environment/NetworkDevices\");\n\n        return this.getJSON(url);\n    }\n\n    /**\n     * Cancels a package installation\n     */\n    cancelPackageInstallation(installationId) {\n        if (!installationId) {\n            throw new Error(\"null installationId\");\n        }\n\n        const url = this.getUrl(`Packages/Installing/${installationId}`);\n\n        return this.ajax({\n            type: \"DELETE\",\n            url\n        });\n    }\n\n    /**\n     * Refreshes metadata for an item\n     */\n    refreshItem(itemId, options) {\n        if (!itemId) {\n            throw new Error(\"null itemId\");\n        }\n\n        const url = this.getUrl(`Items/${itemId}/Refresh`, options || {});\n\n        return this.ajax({\n            type: \"POST\",\n            url\n        });\n    }\n\n    /**\n     * Installs or updates a new plugin\n     */\n    installPlugin(name, guid, updateClass, version) {\n        if (!name) {\n            throw new Error(\"null name\");\n        }\n\n        if (!updateClass) {\n            throw new Error(\"null updateClass\");\n        }\n\n        const options = {\n            updateClass,\n            AssemblyGuid: guid\n        };\n\n        if (version) {\n            options.version = version;\n        }\n\n        const url = this.getUrl(`Packages/Installed/${name}`, options);\n\n        return this.ajax({\n            type: \"POST\",\n            url\n        });\n    }\n\n    /**\n     * Instructs the server to perform a restart.\n     */\n    restartServer() {\n        const url = this.getUrl(\"System/Restart\");\n\n        return this.ajax({\n            type: \"POST\",\n            url\n        });\n    }\n\n    /**\n     * Instructs the server to perform a shutdown.\n     */\n    shutdownServer() {\n        const url = this.getUrl(\"System/Shutdown\");\n\n        return this.ajax({\n            type: \"POST\",\n            url\n        });\n    }\n\n    /**\n     * Gets information about an installable package\n     */\n    getPackageInfo(name, guid) {\n        if (!name) {\n            throw new Error(\"null name\");\n        }\n\n        const options = {\n            AssemblyGuid: guid\n        };\n\n        const url = this.getUrl(`Packages/${name}`, options);\n\n        return this.getJSON(url);\n    }\n\n    /**\n     * Gets the virtual folder list\n     */\n    getVirtualFolders() {\n        let url = \"Library/VirtualFolders\";\n\n        url = this.getUrl(url);\n\n        return this.getJSON(url);\n    }\n\n    /**\n     * Gets all the paths of the locations in the physical root.\n     */\n    getPhysicalPaths() {\n        const url = this.getUrl(\"Library/PhysicalPaths\");\n\n        return this.getJSON(url);\n    }\n\n    /**\n     * Gets the current server configuration\n     */\n    getServerConfiguration() {\n        const url = this.getUrl(\"System/Configuration\");\n\n        return this.getJSON(url);\n    }\n\n    /**\n     * Gets the current server configuration\n     */\n    getDevicesOptions() {\n        const url = this.getUrl(\"System/Configuration/devices\");\n\n        return this.getJSON(url);\n    }\n\n    /**\n     * Gets the current server configuration\n     */\n    getContentUploadHistory() {\n        const url = this.getUrl(\"Devices/CameraUploads\", {\n            DeviceId: this.deviceId()\n        });\n\n        return this.getJSON(url);\n    }\n\n    getNamedConfiguration(name) {\n        const url = this.getUrl(`System/Configuration/${name}`);\n\n        return this.getJSON(url);\n    }\n\n    /**\n     * Gets the server's scheduled tasks\n     */\n    getScheduledTasks(options = {}) {\n        const url = this.getUrl(\"ScheduledTasks\", options);\n\n        return this.getJSON(url);\n    }\n\n    /**\n     * Starts a scheduled task\n     */\n    startScheduledTask(id) {\n        if (!id) {\n            throw new Error(\"null id\");\n        }\n\n        const url = this.getUrl(`ScheduledTasks/Running/${id}`);\n\n        return this.ajax({\n            type: \"POST\",\n            url\n        });\n    }\n\n    /**\n     * Gets a scheduled task\n     */\n    getScheduledTask(id) {\n        if (!id) {\n            throw new Error(\"null id\");\n        }\n\n        const url = this.getUrl(`ScheduledTasks/${id}`);\n\n        return this.getJSON(url);\n    }\n\n    getNextUpEpisodes(options) {\n        const url = this.getUrl(\"Shows/NextUp\", options);\n\n        return this.getJSON(url);\n    }\n\n    /**\n     * Stops a scheduled task\n     */\n    stopScheduledTask(id) {\n        if (!id) {\n            throw new Error(\"null id\");\n        }\n\n        const url = this.getUrl(`ScheduledTasks/Running/${id}`);\n\n        return this.ajax({\n            type: \"DELETE\",\n            url\n        });\n    }\n\n    /**\n     * Gets the configuration of a plugin\n     * @param {String} Id\n     */\n    getPluginConfiguration(id) {\n        if (!id) {\n            throw new Error(\"null Id\");\n        }\n\n        const url = this.getUrl(`Plugins/${id}/Configuration`);\n\n        return this.getJSON(url);\n    }\n\n    /**\n     * Gets a list of plugins that are available to be installed\n     */\n    getAvailablePlugins(options = {}) {\n        options.PackageType = \"UserInstalled\";\n\n        const url = this.getUrl(\"Packages\", options);\n\n        return this.getJSON(url);\n    }\n\n    /**\n     * Uninstalls a plugin\n     * @param {String} Id\n     */\n    uninstallPlugin(id) {\n        if (!id) {\n            throw new Error(\"null Id\");\n        }\n\n        const url = this.getUrl(`Plugins/${id}`);\n\n        return this.ajax({\n            type: \"DELETE\",\n            url\n        });\n    }\n\n    /**\n     * Removes a virtual folder\n     * @param {String} name\n     */\n    removeVirtualFolder(name, refreshLibrary) {\n        if (!name) {\n            throw new Error(\"null name\");\n        }\n\n        let url = \"Library/VirtualFolders\";\n\n        url = this.getUrl(url, {\n            refreshLibrary: refreshLibrary ? true : false,\n            name\n        });\n\n        return this.ajax({\n            type: \"DELETE\",\n            url\n        });\n    }\n\n    /**\n     * Adds a virtual folder\n     * @param {String} name\n     */\n    addVirtualFolder(name, type, refreshLibrary, libraryOptions) {\n        if (!name) {\n            throw new Error(\"null name\");\n        }\n\n        const options = {};\n\n        if (type) {\n            options.collectionType = type;\n        }\n\n        options.refreshLibrary = refreshLibrary ? true : false;\n        options.name = name;\n\n        let url = \"Library/VirtualFolders\";\n\n        url = this.getUrl(url, options);\n\n        return this.ajax({\n            type: \"POST\",\n            url,\n            data: JSON.stringify({\n                LibraryOptions: libraryOptions\n            }),\n            contentType: 'application/json'\n        });\n    }\n\n    updateVirtualFolderOptions(id, libraryOptions) {\n        if (!id) {\n            throw new Error(\"null name\");\n        }\n\n        let url = \"Library/VirtualFolders/LibraryOptions\";\n\n        url = this.getUrl(url);\n\n        return this.ajax({\n            type: \"POST\",\n            url,\n            data: JSON.stringify({\n                Id: id,\n                LibraryOptions: libraryOptions\n            }),\n            contentType: 'application/json'\n        });\n    }\n\n    /**\n     * Renames a virtual folder\n     * @param {String} name\n     */\n    renameVirtualFolder(name, newName, refreshLibrary) {\n        if (!name) {\n            throw new Error(\"null name\");\n        }\n\n        let url = \"Library/VirtualFolders/Name\";\n\n        url = this.getUrl(url, {\n            refreshLibrary: refreshLibrary ? true : false,\n            newName,\n            name\n        });\n\n        return this.ajax({\n            type: \"POST\",\n            url\n        });\n    }\n\n    /**\n     * Adds an additional mediaPath to an existing virtual folder\n     * @param {String} name\n     */\n    addMediaPath(virtualFolderName, mediaPath, networkSharePath, refreshLibrary) {\n        if (!virtualFolderName) {\n            throw new Error(\"null virtualFolderName\");\n        }\n\n        if (!mediaPath) {\n            throw new Error(\"null mediaPath\");\n        }\n\n        let url = \"Library/VirtualFolders/Paths\";\n\n        const pathInfo = {\n            Path: mediaPath\n        };\n        if (networkSharePath) {\n            pathInfo.NetworkPath = networkSharePath;\n        }\n\n        url = this.getUrl(url, {\n            refreshLibrary: refreshLibrary ? true : false\n        });\n\n        return this.ajax({\n            type: \"POST\",\n            url,\n            data: JSON.stringify({\n                Name: virtualFolderName,\n                PathInfo: pathInfo\n            }),\n            contentType: 'application/json'\n        });\n    }\n\n    updateMediaPath(virtualFolderName, pathInfo) {\n        if (!virtualFolderName) {\n            throw new Error(\"null virtualFolderName\");\n        }\n\n        if (!pathInfo) {\n            throw new Error(\"null pathInfo\");\n        }\n\n        let url = \"Library/VirtualFolders/Paths/Update\";\n\n        url = this.getUrl(url);\n\n        return this.ajax({\n            type: \"POST\",\n            url,\n            data: JSON.stringify({\n                Name: virtualFolderName,\n                PathInfo: pathInfo\n            }),\n            contentType: 'application/json'\n        });\n    }\n\n    /**\n     * Removes a media path from a virtual folder\n     * @param {String} name\n     */\n    removeMediaPath(virtualFolderName, mediaPath, refreshLibrary) {\n        if (!virtualFolderName) {\n            throw new Error(\"null virtualFolderName\");\n        }\n\n        if (!mediaPath) {\n            throw new Error(\"null mediaPath\");\n        }\n\n        let url = \"Library/VirtualFolders/Paths\";\n\n        url = this.getUrl(url, {\n            refreshLibrary: refreshLibrary ? true : false,\n            path: mediaPath,\n            name: virtualFolderName\n        });\n\n        return this.ajax({\n            type: \"DELETE\",\n            url\n        });\n    }\n\n    /**\n     * Deletes a user\n     * @param {String} id\n     */\n    deleteUser(id) {\n        if (!id) {\n            throw new Error(\"null id\");\n        }\n\n        const url = this.getUrl(`Users/${id}`);\n\n        return this.ajax({\n            type: \"DELETE\",\n            url\n        });\n    }\n\n    /**\n     * Deletes a user image\n     * @param {String} userId\n     * @param {String} imageType The type of image to delete, based on the server-side ImageType enum.\n     */\n    deleteUserImage(userId, imageType, imageIndex) {\n        if (!userId) {\n            throw new Error(\"null userId\");\n        }\n\n        if (!imageType) {\n            throw new Error(\"null imageType\");\n        }\n\n        let url = this.getUrl(`Users/${userId}/Images/${imageType}`);\n\n        if (imageIndex != null) {\n            url += `/${imageIndex}`;\n        }\n\n        return this.ajax({\n            type: \"DELETE\",\n            url\n        });\n    }\n\n    deleteItemImage(itemId, imageType, imageIndex) {\n        if (!imageType) {\n            throw new Error(\"null imageType\");\n        }\n\n        let url = this.getUrl(`Items/${itemId}/Images`);\n\n        url += `/${imageType}`;\n\n        if (imageIndex != null) {\n            url += `/${imageIndex}`;\n        }\n\n        return this.ajax({\n            type: \"DELETE\",\n            url\n        });\n    }\n\n    deleteItem(itemId) {\n        if (!itemId) {\n            throw new Error(\"null itemId\");\n        }\n\n        const url = this.getUrl(`Items/${itemId}`);\n\n        return this.ajax({\n            type: \"DELETE\",\n            url\n        });\n    }\n\n    stopActiveEncodings(playSessionId) {\n        const options = {\n            deviceId: this.deviceId()\n        };\n\n        if (playSessionId) {\n            options.PlaySessionId = playSessionId;\n        }\n\n        const url = this.getUrl(\"Videos/ActiveEncodings\", options);\n\n        return this.ajax({\n            type: \"DELETE\",\n            url\n        });\n    }\n\n    reportCapabilities(options) {\n        const url = this.getUrl(\"Sessions/Capabilities/Full\");\n\n        return this.ajax({\n            type: \"POST\",\n            url,\n            data: JSON.stringify(options),\n            contentType: \"application/json\"\n        });\n    }\n\n    updateItemImageIndex(itemId, imageType, imageIndex, newIndex) {\n        if (!imageType) {\n            throw new Error(\"null imageType\");\n        }\n\n        const options = { newIndex };\n\n        const url = this.getUrl(`Items/${itemId}/Images/${imageType}/${imageIndex}/Index`, options);\n\n        return this.ajax({\n            type: \"POST\",\n            url\n        });\n    }\n\n    getItemImageInfos(itemId) {\n        const url = this.getUrl(`Items/${itemId}/Images`);\n\n        return this.getJSON(url);\n    }\n\n    getCriticReviews(itemId, options) {\n        if (!itemId) {\n            throw new Error(\"null itemId\");\n        }\n\n        const url = this.getUrl(`Items/${itemId}/CriticReviews`, options);\n\n        return this.getJSON(url);\n    }\n\n    getItemDownloadUrl(itemId) {\n        if (!itemId) {\n            throw new Error(\"itemId cannot be empty\");\n        }\n\n        const url = `Items/${itemId}/Download`;\n\n        return this.getUrl(url, {\n            api_key: this.accessToken()\n        });\n    }\n\n    getSessions(options) {\n        const url = this.getUrl(\"Sessions\", options);\n\n        return this.getJSON(url);\n    }\n\n    /**\n     * Uploads a user image\n     * @param {String} userId\n     * @param {String} imageType The type of image to delete, based on the server-side ImageType enum.\n     * @param {Object} file The file from the input element\n     */\n    uploadUserImage(userId, imageType, file) {\n        if (!userId) {\n            throw new Error(\"null userId\");\n        }\n\n        if (!imageType) {\n            throw new Error(\"null imageType\");\n        }\n\n        if (!file) {\n            throw new Error(\"File must be an image.\");\n        }\n\n        if (!file.type.startsWith(\"image/\")) {\n            throw new Error(\"File must be an image.\");\n        }\n\n        const instance = this;\n\n        return new Promise((resolve, reject) => {\n            const reader = new FileReader();\n\n            reader.onerror = () => {\n                reject();\n            };\n\n            reader.onabort = () => {\n                reject();\n            };\n\n            // Closure to capture the file information.\n            reader.onload = e => {\n                // Split by a comma to remove the url: prefix\n                const data = e.target.result.split(',')[1];\n\n                const url = instance.getUrl(`Users/${userId}/Images/${imageType}`);\n\n                instance.ajax({\n                    type: \"POST\",\n                    url,\n                    data,\n                    contentType: `image/${file.name.substring(file.name.lastIndexOf('.') + 1)}`\n                }).then(resolve, reject);\n            };\n\n            // Read in the image file as a data URL.\n            reader.readAsDataURL(file);\n        });\n    }\n\n    uploadItemImage(itemId, imageType, file) {\n        if (!itemId) {\n            throw new Error(\"null itemId\");\n        }\n\n        if (!imageType) {\n            throw new Error(\"null imageType\");\n        }\n\n        if (!file) {\n            throw new Error(\"File must be an image.\");\n        }\n\n        if (!file.type.startsWith(\"image/\")) {\n            throw new Error(\"File must be an image.\");\n        }\n\n        let url = this.getUrl(`Items/${itemId}/Images`);\n\n        url += `/${imageType}`;\n        const instance = this;\n\n        return new Promise((resolve, reject) => {\n            const reader = new FileReader();\n\n            reader.onerror = () => {\n                reject();\n            };\n\n            reader.onabort = () => {\n                reject();\n            };\n\n            // Closure to capture the file information.\n            reader.onload = e => {\n                // Split by a comma to remove the url: prefix\n                const data = e.target.result.split(',')[1];\n\n                instance.ajax({\n                    type: \"POST\",\n                    url,\n                    data,\n                    contentType: `image/${file.name.substring(file.name.lastIndexOf('.') + 1)}`\n                }).then(resolve, reject);\n            };\n\n            // Read in the image file as a data URL.\n            reader.readAsDataURL(file);\n        });\n    }\n\n    /**\n     * Gets the list of installed plugins on the server\n     */\n    getInstalledPlugins() {\n        const options = {};\n\n        const url = this.getUrl(\"Plugins\", options);\n\n        return this.getJSON(url);\n    }\n\n    /**\n     * Gets a user by id\n     * @param {String} id\n     */\n    getUser(id) {\n        if (!id) {\n            throw new Error(\"Must supply a userId\");\n        }\n\n        const url = this.getUrl(`Users/${id}`);\n\n        return this.getJSON(url);\n    }\n\n    /**\n     * Gets a studio\n     */\n    getStudio(name, userId) {\n        if (!name) {\n            throw new Error(\"null name\");\n        }\n\n        const options = {};\n\n        if (userId) {\n            options.userId = userId;\n        }\n\n        const url = this.getUrl(`Studios/${this.encodeName(name)}`, options);\n\n        return this.getJSON(url);\n    }\n\n    /**\n     * Gets a genre\n     */\n    getGenre(name, userId) {\n        if (!name) {\n            throw new Error(\"null name\");\n        }\n\n        const options = {};\n\n        if (userId) {\n            options.userId = userId;\n        }\n\n        const url = this.getUrl(`Genres/${this.encodeName(name)}`, options);\n\n        return this.getJSON(url);\n    }\n\n    getMusicGenre(name, userId) {\n        if (!name) {\n            throw new Error(\"null name\");\n        }\n\n        const options = {};\n\n        if (userId) {\n            options.userId = userId;\n        }\n\n        const url = this.getUrl(`MusicGenres/${this.encodeName(name)}`, options);\n\n        return this.getJSON(url);\n    }\n\n    /**\n     * Gets an artist\n     */\n    getArtist(name, userId) {\n        if (!name) {\n            throw new Error(\"null name\");\n        }\n\n        const options = {};\n\n        if (userId) {\n            options.userId = userId;\n        }\n\n        const url = this.getUrl(`Artists/${this.encodeName(name)}`, options);\n\n        return this.getJSON(url);\n    }\n\n    /**\n     * Gets a Person\n     */\n    getPerson(name, userId) {\n        if (!name) {\n            throw new Error(\"null name\");\n        }\n\n        const options = {};\n\n        if (userId) {\n            options.userId = userId;\n        }\n\n        const url = this.getUrl(`Persons/${this.encodeName(name)}`, options);\n\n        return this.getJSON(url);\n    }\n\n    getPublicUsers() {\n        const url = this.getUrl(\"users/public\");\n\n        return this.ajax({\n            type: \"GET\",\n            url,\n            dataType: \"json\"\n\n        }, false);\n    }\n\n    /**\n     * Gets all users from the server\n     */\n    getUsers(options) {\n        const url = this.getUrl(\"users\", options || {});\n\n        return this.getJSON(url);\n    }\n\n    /**\n     * Gets all available parental ratings from the server\n     */\n    getParentalRatings() {\n        const url = this.getUrl(\"Localization/ParentalRatings\");\n\n        return this.getJSON(url);\n    }\n\n    getDefaultImageQuality(imageType) {\n        return imageType.toLowerCase() === 'backdrop' ? 80 : 90;\n    }\n\n    /**\n     * Constructs a url for a user image\n     * @param {String} userId\n     * @param {Object} options\n     * Options supports the following properties:\n     * width - download the image at a fixed width\n     * height - download the image at a fixed height\n     * maxWidth - download the image at a maxWidth\n     * maxHeight - download the image at a maxHeight\n     * quality - A scale of 0-100. This should almost always be omitted as the default will suffice.\n     * For best results do not specify both width and height together, as aspect ratio might be altered.\n     */\n    getUserImageUrl(userId, options) {\n        if (!userId) {\n            throw new Error(\"null userId\");\n        }\n\n        options = options || {};\n\n        let url = `Users/${userId}/Images/${options.type}`;\n\n        if (options.index != null) {\n            url += `/${options.index}`;\n        }\n\n        normalizeImageOptions(this, options);\n\n        // Don't put these on the query string\n        delete options.type;\n        delete options.index;\n\n        return this.getUrl(url, options);\n    }\n\n    /**\n     * Constructs a url for an item image\n     * @param {String} itemId\n     * @param {Object} options\n     * Options supports the following properties:\n     * type - Primary, logo, backdrop, etc. See the server-side enum ImageType\n     * index - When downloading a backdrop, use this to specify which one (omitting is equivalent to zero)\n     * width - download the image at a fixed width\n     * height - download the image at a fixed height\n     * maxWidth - download the image at a maxWidth\n     * maxHeight - download the image at a maxHeight\n     * quality - A scale of 0-100. This should almost always be omitted as the default will suffice.\n     * For best results do not specify both width and height together, as aspect ratio might be altered.\n     */\n    getImageUrl(itemId, options) {\n        if (!itemId) {\n            throw new Error(\"itemId cannot be empty\");\n        }\n\n        options = options || {};\n\n        let url = `Items/${itemId}/Images/${options.type}`;\n\n        if (options.index != null) {\n            url += `/${options.index}`;\n        }\n\n        options.quality = options.quality || this.getDefaultImageQuality(options.type);\n\n        if (this.normalizeImageOptions) {\n            this.normalizeImageOptions(options);\n        }\n\n        // Don't put these on the query string\n        delete options.type;\n        delete options.index;\n\n        return this.getUrl(url, options);\n    }\n\n    getScaledImageUrl(itemId, options) {\n        if (!itemId) {\n            throw new Error(\"itemId cannot be empty\");\n        }\n\n        options = options || {};\n\n        let url = `Items/${itemId}/Images/${options.type}`;\n\n        if (options.index != null) {\n            url += `/${options.index}`;\n        }\n\n        normalizeImageOptions(this, options);\n\n        // Don't put these on the query string\n        delete options.type;\n        delete options.index;\n        delete options.minScale;\n\n        return this.getUrl(url, options);\n    }\n\n    getThumbImageUrl(item, options) {\n        if (!item) {\n            throw new Error(\"null item\");\n        }\n\n        options = options || {\n\n        };\n\n        options.imageType = \"thumb\";\n\n        if (item.ImageTags && item.ImageTags.Thumb) {\n\n            options.tag = item.ImageTags.Thumb;\n            return this.getImageUrl(item.Id, options);\n        }\n        else if (item.ParentThumbItemId) {\n\n            options.tag = item.ImageTags.ParentThumbImageTag;\n            return this.getImageUrl(item.ParentThumbItemId, options);\n\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * Updates a user's password\n     * @param {String} userId\n     * @param {String} currentPassword\n     * @param {String} newPassword\n     */\n    updateUserPassword(userId, currentPassword, newPassword) {\n        if (!userId) {\n            return Promise.reject();\n        }\n\n        const url = this.getUrl(`Users/${userId}/Password`);\n\n        return this.ajax({\n            type: \"POST\",\n            url: url,\n            data: JSON.stringify({\n                CurrentPw: currentPassword || '',\n                NewPw: newPassword\n            }),\n            contentType: \"application/json\"\n        });\n    }\n\n    /**\n     * Updates a user's easy password\n     * @param {String} userId\n     * @param {String} newPassword\n     */\n    updateEasyPassword(userId, newPassword) {\n        const instance = this;\n\n        if (!userId) {\n            Promise.reject();\n            return;\n        }\n\n        const url = this.getUrl(`Users/${userId}/EasyPassword`);\n\n        return this.ajax({\n            type: \"POST\",\n            url,\n            data: {\n                NewPw: newPassword\n            }\n        });\n    }\n\n    /**\n     * Resets a user's password\n     * @param {String} userId\n     */\n    resetUserPassword(userId) {\n        if (!userId) {\n            throw new Error(\"null userId\");\n        }\n\n        const url = this.getUrl(`Users/${userId}/Password`);\n\n        const postData = {};\n\n        postData.resetPassword = true;\n\n        return this.ajax({\n            type: \"POST\",\n            url,\n            data: postData\n        });\n    }\n\n    resetEasyPassword(userId) {\n        if (!userId) {\n            throw new Error(\"null userId\");\n        }\n\n        const url = this.getUrl(`Users/${userId}/EasyPassword`);\n\n        const postData = {};\n\n        postData.resetPassword = true;\n\n        return this.ajax({\n            type: \"POST\",\n            url,\n            data: postData\n        });\n    }\n\n    /**\n     * Updates the server's configuration\n     * @param {Object} configuration\n     */\n    updateServerConfiguration(configuration) {\n        if (!configuration) {\n            throw new Error(\"null configuration\");\n        }\n\n        const url = this.getUrl(\"System/Configuration\");\n\n        return this.ajax({\n            type: \"POST\",\n            url,\n            data: JSON.stringify(configuration),\n            contentType: \"application/json\"\n        });\n    }\n\n    updateNamedConfiguration(name, configuration) {\n        if (!configuration) {\n            throw new Error(\"null configuration\");\n        }\n\n        const url = this.getUrl(`System/Configuration/${name}`);\n\n        return this.ajax({\n            type: \"POST\",\n            url,\n            data: JSON.stringify(configuration),\n            contentType: \"application/json\"\n        });\n    }\n\n    updateItem(item) {\n        if (!item) {\n            throw new Error(\"null item\");\n        }\n\n        const url = this.getUrl(`Items/${item.Id}`);\n\n        return this.ajax({\n            type: \"POST\",\n            url,\n            data: JSON.stringify(item),\n            contentType: \"application/json\"\n        });\n    }\n\n    /**\n     * Updates plugin security info\n     */\n    updatePluginSecurityInfo(info) {\n        const url = this.getUrl(\"Plugins/SecurityInfo\");\n\n        return this.ajax({\n            type: \"POST\",\n            url,\n            data: JSON.stringify(info),\n            contentType: \"application/json\"\n        });\n    }\n\n    /**\n     * Creates a user\n     * @param {Object} user\n     */\n    createUser(user) {\n        const url = this.getUrl(\"Users/New\");\n        return this.ajax({\n            type: \"POST\",\n            url,\n            data: JSON.stringify(user),\n            contentType: \"application/json\"\n        });\n    }\n\n    /**\n     * Updates a user\n     * @param {Object} user\n     */\n    updateUser(user) {\n        if (!user) {\n            throw new Error(\"null user\");\n        }\n\n        const url = this.getUrl(`Users/${user.Id}`);\n\n        return this.ajax({\n            type: \"POST\",\n            url,\n            data: JSON.stringify(user),\n            contentType: \"application/json\"\n        });\n    }\n\n    updateUserPolicy(userId, policy) {\n        if (!userId) {\n            throw new Error(\"null userId\");\n        }\n        if (!policy) {\n            throw new Error(\"null policy\");\n        }\n\n        const url = this.getUrl(`Users/${userId}/Policy`);\n\n        return this.ajax({\n            type: \"POST\",\n            url,\n            data: JSON.stringify(policy),\n            contentType: \"application/json\"\n        });\n    }\n\n    updateUserConfiguration(userId, configuration) {\n        if (!userId) {\n            throw new Error(\"null userId\");\n        }\n        if (!configuration) {\n            throw new Error(\"null configuration\");\n        }\n\n        const url = this.getUrl(`Users/${userId}/Configuration`);\n\n        return this.ajax({\n            type: \"POST\",\n            url,\n            data: JSON.stringify(configuration),\n            contentType: \"application/json\"\n        });\n    }\n\n    /**\n     * Updates the Triggers for a ScheduledTask\n     * @param {String} id\n     * @param {Object} triggers\n     */\n    updateScheduledTaskTriggers(id, triggers) {\n        if (!id) {\n            throw new Error(\"null id\");\n        }\n\n        if (!triggers) {\n            throw new Error(\"null triggers\");\n        }\n\n        const url = this.getUrl(`ScheduledTasks/${id}/Triggers`);\n\n        return this.ajax({\n            type: \"POST\",\n            url,\n            data: JSON.stringify(triggers),\n            contentType: \"application/json\"\n        });\n    }\n\n    /**\n     * Updates a plugin's configuration\n     * @param {String} Id\n     * @param {Object} configuration\n     */\n    updatePluginConfiguration(id, configuration) {\n        if (!id) {\n            throw new Error(\"null Id\");\n        }\n\n        if (!configuration) {\n            throw new Error(\"null configuration\");\n        }\n\n        const url = this.getUrl(`Plugins/${id}/Configuration`);\n\n        return this.ajax({\n            type: \"POST\",\n            url,\n            data: JSON.stringify(configuration),\n            contentType: \"application/json\"\n        });\n    }\n\n    getAncestorItems(itemId, userId) {\n        if (!itemId) {\n            throw new Error(\"null itemId\");\n        }\n\n        const options = {};\n\n        if (userId) {\n            options.userId = userId;\n        }\n\n        const url = this.getUrl(`Items/${itemId}/Ancestors`, options);\n\n        return this.getJSON(url);\n    }\n\n    /**\n     * Gets items based on a query, typically for children of a folder\n     * @param {String} userId\n     * @param {Object} options\n     * Options accepts the following properties:\n     * itemId - Localize the search to a specific folder (root if omitted)\n     * startIndex - Use for paging\n     * limit - Use to limit results to a certain number of items\n     * filter - Specify one or more ItemFilters, comma delimeted (see server-side enum)\n     * sortBy - Specify an ItemSortBy (comma-delimeted list see server-side enum)\n     * sortOrder - ascending/descending\n     * fields - additional fields to include aside from basic info. This is a comma delimited list. See server-side enum ItemFields.\n     * index - the name of the dynamic, localized index function\n     * dynamicSortBy - the name of the dynamic localized sort function\n     * recursive - Whether or not the query should be recursive\n     * searchTerm - search term to use as a filter\n     */\n    getItems(userId, options) {\n        let url;\n\n        if ((typeof userId).toString().toLowerCase() === 'string') {\n            url = this.getUrl(`Users/${userId}/Items`, options);\n        } else {\n\n            url = this.getUrl(\"Items\", options);\n        }\n\n        return this.getJSON(url);\n    }\n\n    getResumableItems(userId, options) {\n        if (this.isMinServerVersion('3.2.33')) {\n            return this.getJSON(this.getUrl(`Users/${userId}/Items/Resume`, options));\n        }\n\n        return this.getItems(userId, Object.assign({\n            SortBy: \"DatePlayed\",\n            SortOrder: \"Descending\",\n            Filters: \"IsResumable\",\n            Recursive: true,\n            CollapseBoxSetItems: false,\n            ExcludeLocationTypes: \"Virtual\"\n        }, options));\n    }\n\n    getMovieRecommendations(options) {\n        return this.getJSON(this.getUrl('Movies/Recommendations', options));\n    }\n\n    getUpcomingEpisodes(options) {\n        return this.getJSON(this.getUrl('Shows/Upcoming', options));\n    }\n\n    getUserViews(options = {}, userId) {\n        const url = this.getUrl(`Users/${userId || this.getCurrentUserId()}/Views`, options);\n\n        return this.getJSON(url);\n    }\n\n    /**\n     Gets artists from an item\n     */\n    getArtists(userId, options) {\n        if (!userId) {\n            throw new Error(\"null userId\");\n        }\n\n        options = options || {};\n        options.userId = userId;\n\n        const url = this.getUrl(\"Artists\", options);\n\n        return this.getJSON(url);\n    }\n\n    /**\n     Gets artists from an item\n     */\n    getAlbumArtists(userId, options) {\n        if (!userId) {\n            throw new Error(\"null userId\");\n        }\n\n        options = options || {};\n        options.userId = userId;\n\n        const url = this.getUrl(\"Artists/AlbumArtists\", options);\n\n        return this.getJSON(url);\n    }\n\n    /**\n     Gets genres from an item\n     */\n    getGenres(userId, options) {\n        if (!userId) {\n            throw new Error(\"null userId\");\n        }\n\n        options = options || {};\n        options.userId = userId;\n\n        const url = this.getUrl(\"Genres\", options);\n\n        return this.getJSON(url);\n    }\n\n    getMusicGenres(userId, options) {\n        if (!userId) {\n            throw new Error(\"null userId\");\n        }\n\n        options = options || {};\n        options.userId = userId;\n\n        const url = this.getUrl(\"MusicGenres\", options);\n\n        return this.getJSON(url);\n    }\n\n    /**\n     Gets people from an item\n     */\n    getPeople(userId, options) {\n        if (!userId) {\n            throw new Error(\"null userId\");\n        }\n\n        options = options || {};\n        options.userId = userId;\n\n        const url = this.getUrl(\"Persons\", options);\n\n        return this.getJSON(url);\n    }\n\n    /**\n     Gets studios from an item\n     */\n    getStudios(userId, options) {\n        if (!userId) {\n            throw new Error(\"null userId\");\n        }\n\n        options = options || {};\n        options.userId = userId;\n\n        const url = this.getUrl(\"Studios\", options);\n\n        return this.getJSON(url);\n    }\n\n    /**\n     * Gets local trailers for an item\n     */\n    getLocalTrailers(userId, itemId) {\n        if (!userId) {\n            throw new Error(\"null userId\");\n        }\n        if (!itemId) {\n            throw new Error(\"null itemId\");\n        }\n\n        const url = this.getUrl(`Users/${userId}/Items/${itemId}/LocalTrailers`);\n\n        return this.getJSON(url);\n    }\n\n    getAdditionalVideoParts(userId, itemId) {\n        if (!itemId) {\n            throw new Error(\"null itemId\");\n        }\n\n        const options = {};\n\n        if (userId) {\n            options.userId = userId;\n        }\n\n        const url = this.getUrl(`Videos/${itemId}/AdditionalParts`, options);\n\n        return this.getJSON(url);\n    }\n\n    getThemeMedia(userId, itemId, inherit) {\n        if (!itemId) {\n            throw new Error(\"null itemId\");\n        }\n\n        const options = {};\n\n        if (userId) {\n            options.userId = userId;\n        }\n\n        options.InheritFromParent = inherit || false;\n\n        const url = this.getUrl(`Items/${itemId}/ThemeMedia`, options);\n\n        return this.getJSON(url);\n    }\n\n    getSearchHints(options) {\n        const url = this.getUrl(\"Search/Hints\", options);\n        const serverId = this.serverId();\n\n        return this.getJSON(url).then(result => {\n            result.SearchHints.forEach(i => {\n                i.ServerId = serverId;\n            });\n            return result;\n        });\n    }\n\n    /**\n     * Gets special features for an item\n     */\n    getSpecialFeatures(userId, itemId) {\n        if (!userId) {\n            throw new Error(\"null userId\");\n        }\n        if (!itemId) {\n            throw new Error(\"null itemId\");\n        }\n\n        const url = this.getUrl(`Users/${userId}/Items/${itemId}/SpecialFeatures`);\n\n        return this.getJSON(url);\n    }\n\n    getDateParamValue(date) {\n        function formatDigit(i) {\n            return i < 10 ? `0${i}` : i;\n        }\n\n        const d = date;\n\n        return `${d.getFullYear()}${formatDigit(d.getMonth() + 1)}${formatDigit(d.getDate())}${formatDigit(d.getHours())}${formatDigit(d.getMinutes())}${formatDigit(d.getSeconds())}`;\n    }\n\n    markPlayed(userId, itemId, date) {\n        if (!userId) {\n            throw new Error(\"null userId\");\n        }\n\n        if (!itemId) {\n            throw new Error(\"null itemId\");\n        }\n\n        const options = {};\n\n        if (date) {\n            options.DatePlayed = this.getDateParamValue(date);\n        }\n\n        const url = this.getUrl(`Users/${userId}/PlayedItems/${itemId}`, options);\n\n        return this.ajax({\n            type: \"POST\",\n            url,\n            dataType: \"json\"\n        });\n    }\n\n    markUnplayed(userId, itemId) {\n        if (!userId) {\n            throw new Error(\"null userId\");\n        }\n\n        if (!itemId) {\n            throw new Error(\"null itemId\");\n        }\n\n        const url = this.getUrl(`Users/${userId}/PlayedItems/${itemId}`);\n\n        return this.ajax({\n            type: \"DELETE\",\n            url,\n            dataType: \"json\"\n        });\n    }\n\n    /**\n     * Updates a user's favorite status for an item.\n     * @param {String} userId\n     * @param {String} itemId\n     * @param {Boolean} isFavorite\n     */\n    updateFavoriteStatus(userId, itemId, isFavorite) {\n        if (!userId) {\n            throw new Error(\"null userId\");\n        }\n\n        if (!itemId) {\n            throw new Error(\"null itemId\");\n        }\n\n        const url = this.getUrl(`Users/${userId}/FavoriteItems/${itemId}`);\n\n        const method = isFavorite ? \"POST\" : \"DELETE\";\n\n        return this.ajax({\n            type: method,\n            url,\n            dataType: \"json\"\n        });\n    }\n\n    /**\n     * Updates a user's personal rating for an item\n     * @param {String} userId\n     * @param {String} itemId\n     * @param {Boolean} likes\n     */\n    updateUserItemRating(userId, itemId, likes) {\n        if (!userId) {\n            throw new Error(\"null userId\");\n        }\n\n        if (!itemId) {\n            throw new Error(\"null itemId\");\n        }\n\n        const url = this.getUrl(`Users/${userId}/Items/${itemId}/Rating`, {\n            likes\n        });\n\n        return this.ajax({\n            type: \"POST\",\n            url,\n            dataType: \"json\"\n        });\n    }\n\n    getItemCounts(userId) {\n        const options = {};\n\n        if (userId) {\n            options.userId = userId;\n        }\n\n        const url = this.getUrl(\"Items/Counts\", options);\n\n        return this.getJSON(url);\n    }\n\n    /**\n     * Clears a user's personal rating for an item\n     * @param {String} userId\n     * @param {String} itemId\n     */\n    clearUserItemRating(userId, itemId) {\n        if (!userId) {\n            throw new Error(\"null userId\");\n        }\n\n        if (!itemId) {\n            throw new Error(\"null itemId\");\n        }\n\n        const url = this.getUrl(`Users/${userId}/Items/${itemId}/Rating`);\n\n        return this.ajax({\n            type: \"DELETE\",\n            url,\n            dataType: \"json\"\n        });\n    }\n\n    /**\n     * Reports the user has started playing something\n     * @param {String} userId\n     * @param {String} itemId\n     */\n    reportPlaybackStart(options) {\n        if (!options) {\n            throw new Error(\"null options\");\n        }\n\n        this.lastPlaybackProgressReport = 0;\n        this.lastPlaybackProgressReportTicks = null;\n        stopBitrateDetection(this);\n\n        const url = this.getUrl(\"Sessions/Playing\");\n\n        return this.ajax({\n            type: \"POST\",\n            data: JSON.stringify(options),\n            contentType: \"application/json\",\n            url\n        });\n    }\n\n    /**\n     * Reports progress viewing an item\n     * @param {String} userId\n     * @param {String} itemId\n     */\n    reportPlaybackProgress(options) {\n        if (!options) {\n            throw new Error(\"null options\");\n        }\n\n        const newPositionTicks = options.PositionTicks;\n\n        if ((options.EventName || 'timeupdate') === 'timeupdate') {\n            const now = new Date().getTime();\n            const msSinceLastReport = now - (this.lastPlaybackProgressReport || 0);\n\n            if (msSinceLastReport <= 10000) {\n                if (!newPositionTicks) {\n                    return Promise.resolve();\n                }\n\n                const expectedReportTicks = (msSinceLastReport * 10000) + (this.lastPlaybackProgressReportTicks || 0);\n\n                if (Math.abs((newPositionTicks || 0) - expectedReportTicks) < (5000 * 10000)) {\n                    return Promise.resolve();\n                }\n            }\n\n            this.lastPlaybackProgressReport = now;\n        } else {\n            // allow the next timeupdate\n            this.lastPlaybackProgressReport = 0;\n        }\n\n        this.lastPlaybackProgressReportTicks = newPositionTicks;\n        const url = this.getUrl(\"Sessions/Playing/Progress\");\n\n        return this.ajax({\n            type: \"POST\",\n            data: JSON.stringify(options),\n            contentType: \"application/json\",\n            url\n        });\n    }\n\n    reportOfflineActions(actions) {\n        if (!actions) {\n            throw new Error(\"null actions\");\n        }\n\n        const url = this.getUrl(\"Sync/OfflineActions\");\n\n        return this.ajax({\n            type: \"POST\",\n            data: JSON.stringify(actions),\n            contentType: \"application/json\",\n            url\n        });\n    }\n\n    syncData(data) {\n        if (!data) {\n            throw new Error(\"null data\");\n        }\n\n        const url = this.getUrl(\"Sync/Data\");\n\n        return this.ajax({\n            type: \"POST\",\n            data: JSON.stringify(data),\n            contentType: \"application/json\",\n            url,\n            dataType: \"json\"\n        });\n    }\n\n    getReadySyncItems(deviceId) {\n        if (!deviceId) {\n            throw new Error(\"null deviceId\");\n        }\n\n        const url = this.getUrl(\"Sync/Items/Ready\", {\n            TargetId: deviceId\n        });\n\n        return this.getJSON(url);\n    }\n\n    reportSyncJobItemTransferred(syncJobItemId) {\n        if (!syncJobItemId) {\n            throw new Error(\"null syncJobItemId\");\n        }\n\n        const url = this.getUrl(`Sync/JobItems/${syncJobItemId}/Transferred`);\n\n        return this.ajax({\n            type: \"POST\",\n            url\n        });\n    }\n\n    cancelSyncItems(itemIds, targetId) {\n        if (!itemIds) {\n            throw new Error(\"null itemIds\");\n        }\n\n        const url = this.getUrl(`Sync/${targetId || this.deviceId()}/Items`, {\n            ItemIds: itemIds.join(',')\n        });\n\n        return this.ajax({\n            type: \"DELETE\",\n            url\n        });\n    }\n\n    /**\n     * Reports a user has stopped playing an item\n     * @param {String} userId\n     * @param {String} itemId\n     */\n    reportPlaybackStopped(options) {\n        if (!options) {\n            throw new Error(\"null options\");\n        }\n\n        this.lastPlaybackProgressReport = 0;\n        this.lastPlaybackProgressReportTicks = null;\n        redetectBitrate(this);\n\n        const url = this.getUrl(\"Sessions/Playing/Stopped\");\n\n        return this.ajax({\n            type: \"POST\",\n            data: JSON.stringify(options),\n            contentType: \"application/json\",\n            url\n        });\n    }\n\n    sendPlayCommand(sessionId, options) {\n        if (!sessionId) {\n            throw new Error(\"null sessionId\");\n        }\n\n        if (!options) {\n            throw new Error(\"null options\");\n        }\n\n        const url = this.getUrl(`Sessions/${sessionId}/Playing`, options);\n\n        return this.ajax({\n            type: \"POST\",\n            url\n        });\n    }\n\n    sendCommand(sessionId, command) {\n        if (!sessionId) {\n            throw new Error(\"null sessionId\");\n        }\n\n        if (!command) {\n            throw new Error(\"null command\");\n        }\n\n        const url = this.getUrl(`Sessions/${sessionId}/Command`);\n\n        const ajaxOptions = {\n            type: \"POST\",\n            url\n        };\n\n        ajaxOptions.data = JSON.stringify(command);\n        ajaxOptions.contentType = \"application/json\";\n\n        return this.ajax(ajaxOptions);\n    }\n\n    sendMessageCommand(sessionId, options) {\n        if (!sessionId) {\n            throw new Error(\"null sessionId\");\n        }\n\n        if (!options) {\n            throw new Error(\"null options\");\n        }\n\n        const url = this.getUrl(`Sessions/${sessionId}/Message`);\n\n        const ajaxOptions = {\n            type: \"POST\",\n            url\n        };\n\n        ajaxOptions.data = JSON.stringify(options);\n        ajaxOptions.contentType = \"application/json\";\n\n        return this.ajax(ajaxOptions);\n    }\n\n    sendPlayStateCommand(sessionId, command, options) {\n        if (!sessionId) {\n            throw new Error(\"null sessionId\");\n        }\n\n        if (!command) {\n            throw new Error(\"null command\");\n        }\n\n        const url = this.getUrl(`Sessions/${sessionId}/Playing/${command}`, options || {});\n\n        return this.ajax({\n            type: \"POST\",\n            url\n        });\n    }\n\n    createPackageReview(review) {\n        const url = this.getUrl(`Packages/Reviews/${review.id}`, review);\n\n        return this.ajax({\n            type: \"POST\",\n            url,\n        });\n    }\n\n    getPackageReviews(packageId, minRating, maxRating, limit) {\n        if (!packageId) {\n            throw new Error(\"null packageId\");\n        }\n\n        const options = {};\n\n        if (minRating) {\n            options.MinRating = minRating;\n        }\n        if (maxRating) {\n            options.MaxRating = maxRating;\n        }\n        if (limit) {\n            options.Limit = limit;\n        }\n\n        const url = this.getUrl(`Packages/${packageId}/Reviews`, options);\n\n        return this.getJSON(url);\n    }\n\n    getSavedEndpointInfo() {\n        return this._endPointInfo;\n    }\n\n    getEndpointInfo() {\n        const savedValue = this._endPointInfo;\n        if (savedValue) {\n            return Promise.resolve(savedValue);\n        }\n\n        const instance = this;\n        return this.getJSON(this.getUrl('System/Endpoint')).then(endPointInfo => {\n\n            setSavedEndpointInfo(instance, endPointInfo);\n            return endPointInfo;\n        });\n    }\n\n    getLatestItems(options = {}) {\n        return this.getJSON(this.getUrl(`Users/${this.getCurrentUserId()}/Items/Latest`, options));\n    }\n\n    getFilters(options) {\n\n        return this.getJSON(this.getUrl('Items/Filters2', options));\n    }\n\n    setSystemInfo(info) {\n        this._serverVersion = info.Version;\n    }\n\n    serverVersion() {\n        return this._serverVersion;\n    }\n\n    isMinServerVersion(version) {\n        const serverVersion = this.serverVersion();\n\n        if (serverVersion) {\n            return compareVersions(serverVersion, version) >= 0;\n        }\n\n        return false;\n    }\n\n    handleMessageReceived(msg) {\n        onMessageReceivedInternal(this, msg);\n    }\n}\n\nexport default ApiClient;\n","import ApiClient from './apiClient';\n\nconst localPrefix = 'local:';\nconst localViewPrefix = 'localview:';\n\nfunction isLocalId(str) {\n    return startsWith(str, localPrefix);\n}\n\nfunction isLocalViewId(str) {\n    return startsWith(str, localViewPrefix);\n}\n\nfunction isTopLevelLocalViewId(str) {\n    return str === 'localview';\n}\n\nfunction stripLocalPrefix(str) {\n    let res = stripStart(str, localPrefix);\n    res = stripStart(res, localViewPrefix);\n\n    return res;\n}\n\nfunction startsWith(str, find) {\n\n    if (str && find && str.length > find.length) {\n        if (str.indexOf(find) === 0) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nfunction stripStart(str, find) {\n    if (startsWith(str, find)) {\n        return str.substr(find.length);\n    }\n\n    return str;\n}\n\nfunction createEmptyList() {\n    const result = {\n        Items: [],\n        TotalRecordCount: 0\n    };\n\n    return result;\n}\n\nfunction convertGuidToLocal(guid) {\n\n    if (!guid) {\n        return null;\n    }\n\n    if (isLocalId(guid)) {\n        return guid;\n    }\n\n    return `local:${guid}`;\n}\n\nfunction adjustGuidProperties(downloadedItem) {\n\n    downloadedItem.Id = convertGuidToLocal(downloadedItem.Id);\n    downloadedItem.SeriesId = convertGuidToLocal(downloadedItem.SeriesId);\n    downloadedItem.SeasonId = convertGuidToLocal(downloadedItem.SeasonId);\n\n    downloadedItem.AlbumId = convertGuidToLocal(downloadedItem.AlbumId);\n    downloadedItem.ParentId = convertGuidToLocal(downloadedItem.ParentId);\n    downloadedItem.ParentThumbItemId = convertGuidToLocal(downloadedItem.ParentThumbItemId);\n    downloadedItem.ParentPrimaryImageItemId = convertGuidToLocal(downloadedItem.ParentPrimaryImageItemId);\n    downloadedItem.PrimaryImageItemId = convertGuidToLocal(downloadedItem.PrimaryImageItemId);\n    downloadedItem.ParentLogoItemId = convertGuidToLocal(downloadedItem.ParentLogoItemId);\n    downloadedItem.ParentBackdropItemId = convertGuidToLocal(downloadedItem.ParentBackdropItemId);\n\n    downloadedItem.ParentBackdropImageTags = null;\n}\n\nfunction getLocalView(instance, serverId, userId) {\n\n    return instance.getLocalFolders(serverId, userId).then(views => {\n\n        let localView = null;\n\n        if (views.length > 0) {\n\n            localView = {\n                Name: instance.downloadsTitleText || 'Downloads',\n                ServerId: serverId,\n                Id: 'localview',\n                Type: 'localview',\n                IsFolder: true\n            };\n        }\n\n        return Promise.resolve(localView);\n    });\n}\n\n/**\n * Creates a new api client instance\n * @param {String} serverAddress\n * @param {String} clientName s\n * @param {String} applicationVersion\n */\nclass ApiClientEx extends ApiClient {\n    constructor(\n        appStorage,\n        serverAddress,\n        clientName,\n        applicationVersion,\n        deviceName,\n        deviceId,\n        devicePixelRatio,\n        localAssetManager) {\n\n        super(appStorage, serverAddress, clientName, applicationVersion, deviceName, deviceId, devicePixelRatio);\n        this.localAssetManager = localAssetManager;\n    }\n\n    getPlaybackInfo(itemId, options, deviceProfile) {\n\n        const onFailure = () => ApiClient.prototype.getPlaybackInfo.call(instance, itemId, options, deviceProfile);\n\n        if (isLocalId(itemId)) {\n            return this.localAssetManager.getLocalItem(this.serverId(), stripLocalPrefix(itemId)).then(item => {\n\n                // TODO: This was already done during the sync process, right? If so, remove it\n                const mediaSources = item.Item.MediaSources.map(m => {\n                    m.SupportsDirectPlay = true;\n                    m.SupportsDirectStream = false;\n                    m.SupportsTranscoding = false;\n                    m.IsLocal = true;\n                    return m;\n                });\n\n                return {\n                    MediaSources: mediaSources\n                };\n\n            }, onFailure);\n        }\n\n        var instance = this;\n        return this.localAssetManager.getLocalItem(this.serverId(), itemId).then(item => {\n\n            if (item) {\n\n                const mediaSources = item.Item.MediaSources.map(m => {\n                    m.SupportsDirectPlay = true;\n                    m.SupportsDirectStream = false;\n                    m.SupportsTranscoding = false;\n                    m.IsLocal = true;\n                    return m;\n                });\n\n                return instance.localAssetManager.fileExists(item.LocalPath).then(exists => {\n\n                    if (exists) {\n\n                        const res = {\n                            MediaSources: mediaSources\n                        };\n\n                        return Promise.resolve(res);\n                    }\n\n                    return ApiClient.prototype.getPlaybackInfo.call(instance, itemId, options, deviceProfile);\n\n                }, onFailure);\n            }\n\n            return ApiClient.prototype.getPlaybackInfo.call(instance, itemId, options, deviceProfile);\n\n        }, onFailure);\n    }\n\n    getItems(userId, options) {\n\n        const serverInfo = this.serverInfo();\n        let i;\n\n        if (serverInfo && options.ParentId === 'localview') {\n\n            return this.getLocalFolders(serverInfo.Id, userId).then(items => {\n                const result = {\n                    Items: items,\n                    TotalRecordCount: items.length\n                };\n\n                return Promise.resolve(result);\n            });\n\n        } else if (serverInfo && options && (isLocalId(options.ParentId) || isLocalId(options.SeriesId) || isLocalId(options.SeasonId) || isLocalViewId(options.ParentId) || isLocalId(options.AlbumIds))) {\n\n            return this.localAssetManager.getViewItems(serverInfo.Id, userId, options).then(items => {\n\n                items.forEach(item => {\n                    adjustGuidProperties(item);\n                });\n\n                const result = {\n                    Items: items,\n                    TotalRecordCount: items.length\n                };\n\n                return Promise.resolve(result);\n            });\n        } else if (options && options.ExcludeItemIds && options.ExcludeItemIds.length) {\n\n            const exItems = options.ExcludeItemIds.split(',');\n\n            for (i = 0; i < exItems.length; i++) {\n                if (isLocalId(exItems[i])) {\n                    return Promise.resolve(createEmptyList());\n                }\n            }\n        } else if (options && options.Ids && options.Ids.length) {\n\n            const ids = options.Ids.split(',');\n            let hasLocal = false;\n\n            for (i = 0; i < ids.length; i++) {\n                if (isLocalId(ids[i])) {\n                    hasLocal = true;\n                }\n            }\n\n            if (hasLocal) {\n                return this.localAssetManager.getItemsFromIds(serverInfo.Id, ids).then(items => {\n\n                    items.forEach(item => {\n                        adjustGuidProperties(item);\n                    });\n\n                    const result = {\n                        Items: items,\n                        TotalRecordCount: items.length\n                    };\n\n                    return Promise.resolve(result);\n                });\n            }\n        }\n\n        return ApiClient.prototype.getItems.call(this, userId, options);\n    }\n\n    getUserViews(options, userId) {\n\n        const instance = this;\n\n        options = options || {};\n\n        const basePromise = ApiClient.prototype.getUserViews.call(instance, options, userId);\n\n        if (!options.enableLocalView) {\n            return basePromise;\n        }\n\n        return basePromise.then(result => {\n\n            const serverInfo = instance.serverInfo();\n            if (serverInfo) {\n\n                return getLocalView(instance, serverInfo.Id, userId).then(localView => {\n\n                    if (localView) {\n\n                        result.Items.push(localView);\n                        result.TotalRecordCount++;\n                    }\n\n                    return Promise.resolve(result);\n                });\n            }\n\n            return Promise.resolve(result);\n        });\n    }\n\n    getItem(userId, itemId) {\n\n        if (!itemId) {\n            throw new Error(\"null itemId\");\n        }\n\n        if (itemId) {\n            itemId = itemId.toString();\n        }\n\n        let serverInfo;\n\n        if (isTopLevelLocalViewId(itemId)) {\n\n            serverInfo = this.serverInfo();\n\n            if (serverInfo) {\n                return getLocalView(this, serverInfo.Id, userId);\n            }\n        }\n\n        if (isLocalViewId(itemId)) {\n\n            serverInfo = this.serverInfo();\n\n            if (serverInfo) {\n                return this.getLocalFolders(serverInfo.Id, userId).then(items => {\n\n                    const views = items.filter(item => item.Id === itemId);\n\n                    if (views.length > 0) {\n                        return Promise.resolve(views[0]);\n                    }\n\n                    // TODO: Test consequence of this\n                    return Promise.reject();\n                });\n            }\n        }\n\n        if (isLocalId(itemId)) {\n\n            serverInfo = this.serverInfo();\n\n            if (serverInfo) {\n                return this.localAssetManager.getLocalItem(serverInfo.Id, stripLocalPrefix(itemId)).then(item => {\n\n                    adjustGuidProperties(item.Item);\n\n                    return Promise.resolve(item.Item);\n                });\n            }\n        }\n\n        return ApiClient.prototype.getItem.call(this, userId, itemId);\n    }\n\n    getLocalFolders(userId) {\n\n        const serverInfo = this.serverInfo();\n        userId = userId || serverInfo.UserId;\n\n        return this.localAssetManager.getViews(serverInfo.Id, userId);\n    }\n\n    getNextUpEpisodes(options) {\n\n        if (options.SeriesId) {\n            if (isLocalId(options.SeriesId)) {\n                return Promise.resolve(createEmptyList());\n            }\n        }\n\n        return ApiClient.prototype.getNextUpEpisodes.call(this, options);\n    }\n\n    getSeasons(itemId, options) {\n\n        if (isLocalId(itemId)) {\n            options.SeriesId = itemId;\n            options.IncludeItemTypes = 'Season';\n            return this.getItems(this.getCurrentUserId(), options);\n        }\n\n        return ApiClient.prototype.getSeasons.call(this, itemId, options);\n    }\n\n    getEpisodes(itemId, options) {\n\n        if (isLocalId(options.SeasonId) || isLocalId(options.seasonId)) {\n            options.SeriesId = itemId;\n            options.IncludeItemTypes = 'Episode';\n            return this.getItems(this.getCurrentUserId(), options);\n        }\n\n        // get episodes by recursion\n        if (isLocalId(itemId)) {\n            options.SeriesId = itemId;\n            options.IncludeItemTypes = 'Episode';\n            return this.getItems(this.getCurrentUserId(), options);\n        }\n\n        return ApiClient.prototype.getEpisodes.call(this, itemId, options);\n    }\n\n    getLatestOfflineItems(options) {\n\n        // Supported options\n        // MediaType - Audio/Video/Photo/Book/Game\n        // Limit\n        // Filters: 'IsNotFolder' or 'IsFolder'\n\n        options.SortBy = 'DateCreated';\n        options.SortOrder = 'Descending';\n\n        const serverInfo = this.serverInfo();\n\n        if (serverInfo) {\n\n            return this.localAssetManager.getViewItems(serverInfo.Id, null, options).then(items => {\n\n                items.forEach(item => {\n                    adjustGuidProperties(item);\n                });\n\n                return Promise.resolve(items);\n            });\n        }\n\n        return Promise.resolve([]);\n    }\n\n    getThemeMedia(userId, itemId, inherit) {\n\n        if (isLocalViewId(itemId) || isLocalId(itemId) || isTopLevelLocalViewId(itemId)) {\n            return Promise.reject();\n        }\n\n        return ApiClient.prototype.getThemeMedia.call(this, userId, itemId, inherit);\n    }\n\n    getSpecialFeatures(userId, itemId) {\n\n        if (isLocalId(itemId)) {\n            return Promise.resolve([]);\n        }\n\n        return ApiClient.prototype.getSpecialFeatures.call(this, userId, itemId);\n    }\n\n    getSimilarItems(itemId, options) {\n\n        if (isLocalId(itemId)) {\n            return Promise.resolve(createEmptyList());\n        }\n\n        return ApiClient.prototype.getSimilarItems.call(this, itemId, options);\n    }\n\n    updateFavoriteStatus(userId, itemId, isFavorite) {\n\n        if (isLocalId(itemId)) {\n            return Promise.resolve();\n        }\n\n        return ApiClient.prototype.updateFavoriteStatus.call(this, userId, itemId, isFavorite);\n    }\n\n    getScaledImageUrl(itemId, options) {\n\n        if (isLocalId(itemId) || (options && options.itemid && isLocalId(options.itemid))) {\n\n            const serverInfo = this.serverInfo();\n            const id = stripLocalPrefix(itemId);\n\n            return this.localAssetManager.getImageUrl(serverInfo.Id, id, options);\n        }\n\n        return ApiClient.prototype.getScaledImageUrl.call(this, itemId, options);\n    }\n\n    reportPlaybackStart(options) {\n\n        if (!options) {\n            throw new Error(\"null options\");\n        }\n\n        if (isLocalId(options.ItemId)) {\n            return Promise.resolve();\n        }\n\n        return ApiClient.prototype.reportPlaybackStart.call(this, options);\n    }\n\n    reportPlaybackProgress(options) {\n\n        if (!options) {\n            throw new Error(\"null options\");\n        }\n\n        if (isLocalId(options.ItemId)) {\n            const serverInfo = this.serverInfo();\n\n            if (serverInfo) {\n\n                const instance = this;\n                return this.localAssetManager.getLocalItem(serverInfo.Id, stripLocalPrefix(options.ItemId)).then(item => {\n\n                    const libraryItem = item.Item;\n\n                    if (libraryItem.MediaType === 'Video' || libraryItem.Type === 'AudioBook') {\n                        libraryItem.UserData = libraryItem.UserData || {};\n                        libraryItem.UserData.PlaybackPositionTicks = options.PositionTicks;\n                        libraryItem.UserData.PlayedPercentage = Math.min(libraryItem.RunTimeTicks ? (100 * ((options.PositionTicks || 0) / libraryItem.RunTimeTicks)) : 0, 100);\n                        return instance.localAssetManager.addOrUpdateLocalItem(item);\n                    }\n\n                    return Promise.resolve();\n                });\n            }\n\n            return Promise.resolve();\n        }\n\n        return ApiClient.prototype.reportPlaybackProgress.call(this, options);\n    }\n\n    reportPlaybackStopped(options) {\n\n        if (!options) {\n            throw new Error(\"null options\");\n        }\n\n        if (isLocalId(options.ItemId)) {\n\n            const serverInfo = this.serverInfo();\n\n            const action =\n                {\n                    Date: new Date().getTime(),\n                    ItemId: stripLocalPrefix(options.ItemId),\n                    PositionTicks: options.PositionTicks,\n                    ServerId: serverInfo.Id,\n                    Type: 0, // UserActionType.PlayedItem\n                    UserId: this.getCurrentUserId()\n                };\n\n            return this.localAssetManager.recordUserAction(action);\n        }\n\n        return ApiClient.prototype.reportPlaybackStopped.call(this, options);\n    }\n\n    getIntros(itemId) {\n\n        if (isLocalId(itemId)) {\n            return Promise.resolve({\n                Items: [],\n                TotalRecordCount: 0\n            });\n        }\n\n        return ApiClient.prototype.getIntros.call(this, itemId);\n    }\n\n    getInstantMixFromItem(itemId, options) {\n\n        if (isLocalId(itemId)) {\n            return Promise.resolve({\n                Items: [],\n                TotalRecordCount: 0\n            });\n        }\n\n        return ApiClient.prototype.getInstantMixFromItem.call(this, itemId, options);\n    }\n\n    getItemDownloadUrl(itemId) {\n\n        if (isLocalId(itemId)) {\n\n            const serverInfo = this.serverInfo();\n\n            if (serverInfo) {\n\n                return this.localAssetManager.getLocalItem(serverInfo.Id, stripLocalPrefix(itemId)).then(item => Promise.resolve(item.LocalPath));\n            }\n        }\n\n        return ApiClient.prototype.getItemDownloadUrl.call(this, itemId);\n    }\n}\n\nexport default ApiClientEx;\n","import events from './events';\nimport { getFetchPromise } from './utils/fetch';\n\nconst defaultTimeout = 20000;\n\nconst ConnectionMode = {\n    Local: 0,\n    Remote: 1,\n    Manual: 2\n};\n\nfunction getServerAddress(server, mode) {\n\n    switch (mode) {\n        case ConnectionMode.Local:\n            return server.LocalAddress;\n        case ConnectionMode.Manual:\n            return server.ManualAddress;\n        case ConnectionMode.Remote:\n            return server.RemoteAddress;\n        default:\n            return server.ManualAddress || server.LocalAddress || server.RemoteAddress;\n    }\n}\n\nfunction resolveFailure(instance, resolve) {\n\n    resolve({\n        State: 'Unavailable'\n    });\n}\n\nfunction mergeServers(credentialProvider, list1, list2) {\n\n    for (let i = 0, length = list2.length; i < length; i++) {\n        credentialProvider.addOrUpdateServer(list1, list2[i]);\n    }\n\n    return list1;\n}\n\nfunction updateServerInfo(server, systemInfo) {\n\n    server.Name = systemInfo.ServerName;\n\n    if (systemInfo.Id) {\n        server.Id = systemInfo.Id;\n    }\n    if (systemInfo.LocalAddress) {\n        server.LocalAddress = systemInfo.LocalAddress;\n    }\n    if (systemInfo.WanAddress) {\n        server.RemoteAddress = systemInfo.WanAddress;\n    }\n}\n\nfunction getEmbyServerUrl(baseUrl, handler) {\n    return `${baseUrl}/emby/${handler}`;\n}\n\nfunction ajax(request) {\n\n    if (!request) {\n        throw new Error(\"Request cannot be null\");\n    }\n\n    request.headers = request.headers || {};\n\n    console.log(`ConnectionManager requesting url: ${request.url}`);\n\n    return getFetchPromise(request).then(response => {\n\n        console.log(`ConnectionManager response status: ${response.status}, url: ${request.url}`);\n\n        if (response.status < 400) {\n\n            if (request.dataType === 'json' || request.headers.accept === 'application/json') {\n                return response.json();\n            } else {\n                return response;\n            }\n        } else {\n            return Promise.reject(response);\n        }\n\n    }, err => {\n\n        console.log(`ConnectionManager request failed to url: ${request.url}`);\n        throw err;\n    });\n}\n\nfunction replaceAll(originalString, strReplace, strWith) {\n    const reg = new RegExp(strReplace, 'ig');\n    return originalString.replace(reg, strWith);\n}\n\nfunction normalizeAddress(address) {\n\n    // attempt to correct bad input\n    address = address.trim();\n\n    if (address.toLowerCase().indexOf('http') !== 0) {\n        address = `http://${address}`;\n    }\n\n    // Seeing failures in iOS when protocol isn't lowercase\n    address = replaceAll(address, 'Http:', 'http:');\n    address = replaceAll(address, 'Https:', 'https:');\n\n    return address;\n}\n\nfunction stringEqualsIgnoreCase(str1, str2) {\n\n    return (str1 || '').toLowerCase() === (str2 || '').toLowerCase();\n}\n\nfunction compareVersions(a, b) {\n\n    // -1 a is smaller\n    // 1 a is larger\n    // 0 equal\n    a = a.split('.');\n    b = b.split('.');\n\n    for (let i = 0, length = Math.max(a.length, b.length); i < length; i++) {\n        const aVal = parseInt(a[i] || '0');\n        const bVal = parseInt(b[i] || '0');\n\n        if (aVal < bVal) {\n            return -1;\n        }\n\n        if (aVal > bVal) {\n            return 1;\n        }\n    }\n\n    return 0;\n}\n\nexport default class ConnectionManager {\n    constructor(\n        credentialProvider,\n        appStorage,\n        apiClientFactory,\n        serverDiscoveryFn,\n        appName,\n        appVersion,\n        deviceName,\n        deviceId,\n        capabilities,\n        devicePixelRatio) {\n\n        console.log('Begin ConnectionManager constructor');\n\n        const self = this;\n        this._apiClients = [];\n\n        self._minServerVersion = '3.2.33';\n\n        self.appVersion = () => appVersion;\n\n        self.appName = () => appName;\n\n        self.capabilities = () => capabilities;\n\n        self.deviceId = () => deviceId;\n\n        self.credentialProvider = () => credentialProvider;\n\n        self.getServerInfo = id => {\n\n            const servers = credentialProvider.credentials().Servers;\n\n            return servers.filter(s => s.Id === id)[0];\n        };\n\n        self.getLastUsedServer = () => {\n\n            const servers = credentialProvider.credentials().Servers;\n\n            servers.sort((a, b) => (b.DateLastAccessed || 0) - (a.DateLastAccessed || 0));\n\n            if (!servers.length) {\n                return null;\n            }\n\n            return servers[0];\n        };\n\n        self.addApiClient = apiClient => {\n\n            self._apiClients.push(apiClient);\n\n            const existingServers = credentialProvider.credentials().Servers.filter(s => stringEqualsIgnoreCase(s.ManualAddress, apiClient.serverAddress()) ||\n                stringEqualsIgnoreCase(s.LocalAddress, apiClient.serverAddress()) ||\n                stringEqualsIgnoreCase(s.RemoteAddress, apiClient.serverAddress()));\n\n            const existingServer = existingServers.length ? existingServers[0] : apiClient.serverInfo();\n            existingServer.DateLastAccessed = new Date().getTime();\n            existingServer.LastConnectionMode = ConnectionMode.Manual;\n            existingServer.ManualAddress = apiClient.serverAddress();\n\n            if (apiClient.manualAddressOnly) {\n                existingServer.manualAddressOnly = true;\n            }\n\n            apiClient.serverInfo(existingServer);\n\n            apiClient.onAuthenticated = (instance, result) => onAuthenticated(instance, result, {}, true);\n\n            if (!existingServers.length) {\n                const credentials = credentialProvider.credentials();\n                credentials.Servers = [existingServer];\n                credentialProvider.credentials(credentials);\n            }\n\n            events.trigger(self, 'apiclientcreated', [apiClient]);\n        };\n\n        self.clearData = () => {\n\n            console.log('connection manager clearing data');\n\n            const credentials = credentialProvider.credentials();\n            credentials.Servers = [];\n            credentialProvider.credentials(credentials);\n        };\n\n        self._getOrAddApiClient = (server, serverUrl) => {\n\n            let apiClient = self.getApiClient(server.Id);\n\n            if (!apiClient) {\n\n                apiClient = new apiClientFactory(serverUrl, appName, appVersion, deviceName, deviceId, devicePixelRatio);\n\n                self._apiClients.push(apiClient);\n\n                apiClient.serverInfo(server);\n\n                apiClient.onAuthenticated = (instance, result) => {\n                    return onAuthenticated(instance, result, {}, true);\n                };\n\n                events.trigger(self, 'apiclientcreated', [apiClient]);\n            }\n\n            console.log('returning instance from getOrAddApiClient');\n            return apiClient;\n        };\n\n        self.getOrCreateApiClient = serverId => {\n\n            const credentials = credentialProvider.credentials();\n            const servers = credentials.Servers.filter(s => stringEqualsIgnoreCase(s.Id, serverId));\n\n            if (!servers.length) {\n                throw new Error(`Server not found: ${serverId}`);\n            }\n\n            const server = servers[0];\n\n            return self._getOrAddApiClient(server, getServerAddress(server, server.LastConnectionMode));\n        };\n\n        function onAuthenticated(apiClient, result, options, saveCredentials) {\n\n            const credentials = credentialProvider.credentials();\n            const servers = credentials.Servers.filter(s => s.Id === result.ServerId);\n\n            const server = servers.length ? servers[0] : apiClient.serverInfo();\n\n            if (options.updateDateLastAccessed !== false) {\n                server.DateLastAccessed = new Date().getTime();\n            }\n            server.Id = result.ServerId;\n\n            if (saveCredentials) {\n                server.UserId = result.User.Id;\n                server.AccessToken = result.AccessToken;\n            } else {\n                server.UserId = null;\n                server.AccessToken = null;\n            }\n\n            credentialProvider.addOrUpdateServer(credentials.Servers, server);\n            credentialProvider.credentials(credentials);\n\n            // set this now before updating server info, otherwise it won't be set in time\n            apiClient.enableAutomaticBitrateDetection = options.enableAutomaticBitrateDetection;\n\n            apiClient.serverInfo(server);\n            afterConnected(apiClient, options);\n\n            return onLocalUserSignIn(server, apiClient.serverAddress(), result.User);\n        }\n\n        function afterConnected(apiClient, options = {}) {\n            if (options.reportCapabilities !== false) {\n                apiClient.reportCapabilities(capabilities);\n            }\n            apiClient.enableAutomaticBitrateDetection = options.enableAutomaticBitrateDetection;\n\n            if (options.enableWebSocket !== false) {\n                console.log('calling apiClient.ensureWebSocket');\n\n                apiClient.ensureWebSocket();\n            }\n        }\n\n        function onLocalUserSignIn(server, serverUrl, user) {\n\n            // Ensure this is created so that listeners of the event can get the apiClient instance\n            self._getOrAddApiClient(server, serverUrl);\n\n            // This allows the app to have a single hook that fires before any other\n            const promise = self.onLocalUserSignedIn ? self.onLocalUserSignedIn.call(self, user) : Promise.resolve();\n\n            return promise.then(() => {\n                events.trigger(self, 'localusersignedin', [user]);\n            });\n        }\n\n        function validateAuthentication(server, serverUrl) {\n\n            return ajax({\n\n                type: \"GET\",\n                url: getEmbyServerUrl(serverUrl, \"System/Info\"),\n                dataType: \"json\",\n                headers: {\n                    \"X-MediaBrowser-Token\": server.AccessToken\n                }\n\n            }).then(systemInfo => {\n\n                updateServerInfo(server, systemInfo);\n                return Promise.resolve();\n\n            }, () => {\n\n                server.UserId = null;\n                server.AccessToken = null;\n                return Promise.resolve();\n            });\n        }\n\n        function getImageUrl(localUser) {\n\n            if (localUser && localUser.PrimaryImageTag) {\n\n                const apiClient = self.getApiClient(localUser);\n\n                const url = apiClient.getUserImageUrl(localUser.Id, {\n                    tag: localUser.PrimaryImageTag,\n                    type: \"Primary\"\n                });\n\n                return {\n                    url,\n                    supportsParams: true\n                };\n            }\n\n            return {\n                url: null,\n                supportsParams: false\n            };\n        }\n\n        self.user = apiClient => new Promise((resolve, reject) => {\n\n            let localUser;\n\n            function onLocalUserDone(e) {\n\n                if (apiClient && apiClient.getCurrentUserId()) {\n                    apiClient.getCurrentUser().then(u => {\n                        localUser = u;\n                        const image = getImageUrl(localUser);\n\n                        resolve({\n                            localUser,\n                            name: (localUser ? localUser.Name : null),\n                            imageUrl: image.url,\n                            supportsImageParams: image.supportsParams,\n                        });\n                    });\n                }\n            }\n\n            if (!(apiClient && apiClient.getCurrentUserId())) {\n                onLocalUserDone();\n            }\n        });\n\n        self.logout = () => {\n\n            console.log('begin connectionManager loguot');\n            const promises = [];\n\n            for (let i = 0, length = self._apiClients.length; i < length; i++) {\n\n                const apiClient = self._apiClients[i];\n\n                if (apiClient.accessToken()) {\n                    promises.push(logoutOfServer(apiClient));\n                }\n            }\n\n            return Promise.all(promises).then(() => {\n\n                const credentials = credentialProvider.credentials();\n\n                const servers = credentials.Servers.filter(u => u.UserLinkType !== \"Guest\");\n\n                for (let j = 0, numServers = servers.length; j < numServers; j++) {\n\n                    const server = servers[j];\n\n                    server.UserId = null;\n                    server.AccessToken = null;\n                    server.ExchangeToken = null;\n                }\n            });\n        };\n\n        function logoutOfServer(apiClient) {\n\n            const serverInfo = apiClient.serverInfo() || {};\n\n            const logoutInfo = {\n                serverId: serverInfo.Id\n            };\n\n            return apiClient.logout().then(() => {\n\n                events.trigger(self, 'localusersignedout', [logoutInfo]);\n            }, () => {\n\n                events.trigger(self, 'localusersignedout', [logoutInfo]);\n            });\n        }\n\n        self.getSavedServers = () => {\n\n            const credentials = credentialProvider.credentials();\n\n            const servers = credentials.Servers.slice(0);\n\n            servers.sort((a, b) => (b.DateLastAccessed || 0) - (a.DateLastAccessed || 0));\n\n            return servers;\n        };\n\n        self.getAvailableServers = () => {\n\n            console.log('Begin getAvailableServers');\n\n            // Clone the array\n            const credentials = credentialProvider.credentials();\n\n            return Promise.all([findServers()]).then(responses => {\n\n                const foundServers = responses[0];\n                let servers = credentials.Servers.slice(0);\n                mergeServers(credentialProvider, servers, foundServers);\n\n                servers.sort((a, b) => (b.DateLastAccessed || 0) - (a.DateLastAccessed || 0));\n                credentials.Servers = servers;\n                credentialProvider.credentials(credentials);\n\n                return servers;\n            });\n        };\n\n        function findServers() {\n\n            return new Promise((resolve, reject) => {\n\n                const onFinish = foundServers => {\n                    const servers = foundServers.map(foundServer => {\n\n                        const info = {\n                            Id: foundServer.Id,\n                            LocalAddress: convertEndpointAddressToManualAddress(foundServer) || foundServer.Address,\n                            Name: foundServer.Name\n                        };\n\n                        info.LastConnectionMode = info.ManualAddress ? ConnectionMode.Manual : ConnectionMode.Local;\n\n                        return info;\n                    });\n                    resolve(servers);\n                };\n\n                serverDiscoveryFn.findServers(1000).then(onFinish, () => {\n                    onFinish([]);\n                });\n            });\n        }\n\n        function convertEndpointAddressToManualAddress(info) {\n\n            if (info.Address && info.EndpointAddress) {\n                let address = info.EndpointAddress.split(\":\")[0];\n\n                // Determine the port, if any\n                const parts = info.Address.split(\":\");\n                if (parts.length > 1) {\n                    const portString = parts[parts.length - 1];\n\n                    if (!isNaN(parseInt(portString))) {\n                        address += `:${portString}`;\n                    }\n                }\n\n                return normalizeAddress(address);\n            }\n\n            return null;\n        }\n\n        self.connectToServers = (servers, options) => {\n\n            console.log(`Begin connectToServers, with ${servers.length} servers`);\n\n            const firstServer = servers.length ? servers[0] : null;\n            // See if we have any saved credentials and can auto sign in\n            if (firstServer) {\n                return self.connectToServer(firstServer, options).then((result) => {\n\n                    if (result.State === 'Unavailable') {\n\n                        result.State = 'ServerSelection';\n                    }\n\n                    console.log('resolving connectToServers with result.State: ' + result.State);\n                    return result;\n                });\n            }\n\n            return Promise.resolve({\n                Servers: servers,\n                State: \"ServerSelection\"\n            });\n        };\n\n        function getTryConnectPromise(url, connectionMode, state, resolve, reject) {\n\n            console.log('getTryConnectPromise ' + url);\n\n            ajax({\n\n                url: getEmbyServerUrl(url, 'system/info/public'),\n                timeout: defaultTimeout,\n                type: 'GET',\n                dataType: 'json'\n\n            }).then((result) => {\n\n                if (!state.resolved) {\n                    state.resolved = true;\n\n                    console.log(\"Reconnect succeeded to \" + url);\n                    resolve({\n                        url: url,\n                        connectionMode: connectionMode,\n                        data: result\n                    });\n                }\n\n            }, () => {\n\n                console.log(\"Reconnect failed to \" + url);\n\n                if (!state.resolved) {\n                    state.rejects++;\n                    if (state.rejects >= state.numAddresses) {\n                        reject();\n                    }\n                }\n            });\n        }\n\n        function tryReconnect(serverInfo) {\n\n            const addresses = [];\n            const addressesStrings = [];\n\n            // the timeouts are a small hack to try and ensure the remote address doesn't resolve first\n\n            // manualAddressOnly is used for the local web app that always connects to a fixed address\n            if (!serverInfo.manualAddressOnly && serverInfo.LocalAddress && addressesStrings.indexOf(serverInfo.LocalAddress) === -1) {\n                addresses.push({\n                    url: serverInfo.LocalAddress,\n                    mode: ConnectionMode.Local,\n                    timeout: 0\n                });\n                addressesStrings.push(addresses[addresses.length - 1].url);\n            }\n            if (serverInfo.ManualAddress && addressesStrings.indexOf(serverInfo.ManualAddress) === -1) {\n                addresses.push({\n                    url: serverInfo.ManualAddress,\n                    mode: ConnectionMode.Manual,\n                    timeout: 100\n                });\n                addressesStrings.push(addresses[addresses.length - 1].url);\n            }\n            if (!serverInfo.manualAddressOnly && serverInfo.RemoteAddress && addressesStrings.indexOf(serverInfo.RemoteAddress) === -1) {\n                addresses.push({\n                    url: serverInfo.RemoteAddress,\n                    mode: ConnectionMode.Remote,\n                    timeout: 200\n                });\n                addressesStrings.push(addresses[addresses.length - 1].url);\n            }\n\n            console.log('tryReconnect: ' + addressesStrings.join('|'));\n\n            return new Promise((resolve, reject) => {\n\n                const state = {};\n                state.numAddresses = addresses.length;\n                state.rejects = 0;\n\n                addresses.map((url) => {\n\n                    setTimeout(() => {\n                        if (!state.resolved) {\n                            getTryConnectPromise(url.url, url.mode, state, resolve, reject);\n                        }\n\n                    }, url.timeout);\n                });\n            });\n        }\n\n        self.connectToServer = (server, options) => {\n\n            console.log('begin connectToServer');\n\n            return new Promise((resolve, reject) => {\n\n                options = options || {};\n\n                tryReconnect(server).then((result) => {\n\n                    const serverUrl = result.url;\n                    const connectionMode = result.connectionMode;\n                    result = result.data;\n\n                    if (compareVersions(self.minServerVersion(), result.Version) === 1) {\n\n                        console.log('minServerVersion requirement not met. Server version: ' + result.Version);\n                        resolve({\n                            State: 'ServerUpdateNeeded',\n                            Servers: [server]\n                        });\n\n                    } else if (server.Id && result.Id !== server.Id) {\n\n                        console.log('http request succeeded, but found a different server Id than what was expected');\n                        resolveFailure(self, resolve);\n\n                    } else {\n                        onSuccessfulConnection(server, result, connectionMode, serverUrl, options, resolve);\n                    }\n\n                }, () => {\n\n                    resolveFailure(self, resolve);\n                });\n            });\n        };\n\n        function onSuccessfulConnection(server, systemInfo, connectionMode, serverUrl, verifyLocalAuthentication, options, resolve) {\n\n            const credentials = credentialProvider.credentials();\n            options = options || {};\n            if (options.enableAutoLogin === false) {\n\n                server.UserId = null;\n                server.AccessToken = null;\n\n            } else if (verifyLocalAuthentication && server.AccessToken && options.enableAutoLogin !== false) {\n\n                validateAuthentication(server, serverUrl).then(() => {\n\n                    onSuccessfulConnection(server, credentials, systemInfo, connectionMode, serverUrl, false, options, resolve);\n                });\n\n                return;\n            }\n\n            updateServerInfo(server, systemInfo);\n\n            server.LastConnectionMode = connectionMode;\n\n            if (options.updateDateLastAccessed !== false) {\n                server.DateLastAccessed = new Date().getTime();\n            }\n            credentialProvider.addOrUpdateServer(credentials.Servers, server);\n            credentialProvider.credentials(credentials);\n\n            const result = {\n                Servers: []\n            };\n\n            result.ApiClient = self._getOrAddApiClient(server, serverUrl);\n\n            result.ApiClient.setSystemInfo(systemInfo);\n\n            result.State = server.AccessToken && options.enableAutoLogin !== false ?\n                'SignedIn' :\n                'ServerSignIn';\n\n            result.Servers.push(server);\n\n            // set this now before updating server info, otherwise it won't be set in time\n            result.ApiClient.enableAutomaticBitrateDetection = options.enableAutomaticBitrateDetection;\n\n            result.ApiClient.updateServerInfo(server, serverUrl);\n\n            const resolveActions = function () {\n                resolve(result);\n\n                events.trigger(self, 'connected', [result]);\n            };\n\n            if (result.State === 'SignedIn') {\n                afterConnected(result.ApiClient, options);\n\n                result.ApiClient.getCurrentUser().then((user) => {\n                    onLocalUserSignIn(server, serverUrl, user).then(resolveActions, resolveActions);\n                }, resolveActions);\n            } else {\n                resolveActions();\n            }\n        }\n\n        self.connectToAddress = function (address, options) {\n\n            if (!address) {\n                return Promise.reject();\n            }\n\n            address = normalizeAddress(address);\n            const instance = this;\n\n            function onFail() {\n                console.log(`connectToAddress ${address} failed`);\n                return Promise.resolve({\n                    State: 'Unavailable'\n                });\n            }\n\n            const server = {\n                ManualAddress: address,\n                LastConnectionMode: ConnectionMode.Manual\n            };\n\n            return self.connectToServer(server, options).catch(onFail);\n        };\n\n        self.deleteServer = serverId => {\n\n            if (!serverId) {\n                throw new Error(\"null serverId\");\n            }\n\n            let server = credentialProvider.credentials().Servers.filter(s => s.Id === serverId);\n            server = server.length ? server[0] : null;\n\n            return new Promise((resolve, reject) => {\n\n                function onDone() {\n                    const credentials = credentialProvider.credentials();\n\n                    credentials.Servers = credentials.Servers.filter(s => s.Id !== serverId);\n\n                    credentialProvider.credentials(credentials);\n                    resolve();\n                }\n\n                if (!server.ConnectServerId) {\n                    onDone();\n                    return;\n                }\n            });\n        };\n    }\n\n    connect(options) {\n\n        console.log('Begin connect');\n\n        const instance = this;\n\n        return instance.getAvailableServers().then(servers => instance.connectToServers(servers, options));\n    }\n\n    handleMessageReceived(msg) {\n\n        const serverId = msg.ServerId;\n        if (serverId) {\n            const apiClient = this.getApiClient(serverId);\n            if (apiClient) {\n\n                if (typeof (msg.Data) === 'string') {\n                    try {\n                        msg.Data = JSON.parse(msg.Data);\n                    } catch (err) {\n                        console.log(\"unable to parse json content: \" + err);\n                    }\n                }\n\n                apiClient.handleMessageReceived(msg);\n            }\n        }\n    }\n\n    getApiClients() {\n\n        const servers = this.getSavedServers();\n\n        for (let i = 0, length = servers.length; i < length; i++) {\n            const server = servers[i];\n            if (server.Id) {\n                this._getOrAddApiClient(server, getServerAddress(server, server.LastConnectionMode));\n            }\n        }\n\n        return this._apiClients;\n    }\n\n    getApiClient(item) {\n\n        if (!item) {\n            throw new Error('item or serverId cannot be null');\n        }\n\n        // Accept string + object\n        if (item.ServerId) {\n            item = item.ServerId;\n        }\n\n        return this._apiClients.filter(a => {\n\n            const serverInfo = a.serverInfo();\n\n            // We have to keep this hack in here because of the addApiClient method\n            return !serverInfo || serverInfo.Id === item;\n\n        })[0];\n    }\n\n    minServerVersion(val) {\n\n        if (val) {\n            this._minServerVersion = val;\n        }\n\n        return this._minServerVersion;\n    }\n}\n","import ApiClient from './apiClient';\nimport ApiClientCore from './apiClientCore';\nimport AppStorage from './appStorage';\nimport ConnectionManager from './connectionManager';\nimport Credentials from './credentials';\nimport Events from './events';\n\nexport default {\n    ApiClient,\n    ApiClientCore,\n    AppStorage,\n    ConnectionManager,\n    Credentials,\n    Events\n}\n","import events from './events';\n\nfunction ensure(instance, data) {\n    if (!instance._credentials) {\n        const json = instance.appStorage.getItem(instance.key) || '{}';\n\n        console.log(`credentials initialized with: ${json}`);\n        instance._credentials = JSON.parse(json);\n        instance._credentials.Servers = instance._credentials.Servers || [];\n    }\n}\n\nfunction set(instance, data) {\n    if (data) {\n        instance._credentials = data;\n        instance.appStorage.setItem(instance.key, JSON.stringify(data));\n    } else {\n        instance.clear();\n    }\n\n    events.trigger(instance, 'credentialsupdated');\n}\n\nexport default class Credentials {\n    constructor(appStorage, key) {\n        this.key = key || 'jellyfin_credentials';\n        this.appStorage = appStorage;\n    }\n\n    clear() {\n        this._credentials = null;\n        this.appStorage.removeItem(this.key);\n    }\n\n    credentials(data) {\n        if (data) {\n            set(this, data);\n        }\n\n        ensure(this);\n        return this._credentials;\n    }\n\n    addOrUpdateServer(list, server) {\n        if (!server.Id) {\n            throw new Error('Server.Id cannot be null or empty');\n        }\n\n        const existing = list.filter(({ Id }) => Id === server.Id)[0];\n\n        if (existing) {\n            // Merge the data\n            existing.DateLastAccessed = Math.max(\n                existing.DateLastAccessed || 0,\n                server.DateLastAccessed || 0\n            );\n\n            existing.UserLinkType = server.UserLinkType;\n\n            if (server.AccessToken) {\n                existing.AccessToken = server.AccessToken;\n                existing.UserId = server.UserId;\n            }\n            if (server.ExchangeToken) {\n                existing.ExchangeToken = server.ExchangeToken;\n            }\n            if (server.RemoteAddress) {\n                existing.RemoteAddress = server.RemoteAddress;\n            }\n            if (server.ManualAddress) {\n                existing.ManualAddress = server.ManualAddress;\n            }\n            if (server.LocalAddress) {\n                existing.LocalAddress = server.LocalAddress;\n            }\n            if (server.Name) {\n                existing.Name = server.Name;\n            }\n            if (server.LastConnectionMode != null) {\n                existing.LastConnectionMode = server.LastConnectionMode;\n            }\n            if (server.ConnectServerId) {\n                existing.ConnectServerId = server.ConnectServerId;\n            }\n\n            return existing;\n        } else {\n            list.push(server);\n            return server;\n        }\n    }\n}\n"],"sourceRoot":""}